Flask Tutorial
Last Updated : 03 Apr, 2024
This Flask tutorial is the latest and comprehensive guide designed for beginners and professionals to learn Python Web Framework Flask, which is one of the most popular Python-based web frameworks. Whether you are a beginner or an experienced developer, this tutorial is specially designed to help you learn and master Flask and build your real-world web applications.

This Flask Tutorials covers a wide range of topics from basic concepts such as setup and installation to advanced concepts like user authentication, database integration, and deployment. In addition to this, we also provide you with a list of Flask with Python projects, FAQs, and interview questions for your future Interview.

Before you jump into this tutorial, it’s recommended to have a hands-on experience with HTML and Python. If you are not well aware of these concepts, then we will suggest you go through our tutorials on HTML and Python.

What is Flask?
Flask is a web framework that allows developers to build lightweight web applications quickly and easily with Flask Libraries. It was developed by Armin Ronacher, leader of the International Group of Python Enthusiasts(POCCO). It is basically based on the WSGI toolkit and Jinja2 templating engine.

Flask Setup & Installation
Welcome to the Flask tutorials section! Here, we’ll cover the essential elements you need to kickstart your journey in Flask. From installation and keywords to comments, variables, and indentation, we’ll explore the foundational concepts that underpin Python with Flask development.

Introduction to Web Development using Flask
Differences Between Django vs Flask
Installation of Flask on Windows
Flask Quick Start
Welcome to Flask Quick Start – your go-to guide for mastering Flask development essentials in a snap! From crafting your inaugural application to fine-tuning HTTP methods, routes, and redirects, this concise yet comprehensive resource equips you with the skills needed to excel in Flask development.

Creating the first simple application
Run a Flask Application
Flask Routes
Flask Models
Flask – HTTP Method
Flask – Variable Rules
Redirects and URL
Redirect & Errors
Change Port in Flask app
Changing Host IP Address in Flask
Serve Templates and Static Files in Flask
Discover the essential techniques for serving templates and static files in Flask Web Framework with this comprehensive guide. From mastering Jinja2 templating and template inheritance to ensuring CSRF protection, uploading and managing files, and leveraging Flask Web Framework extensions like Flask-Mail and Flask WTF, this resource covers all you need to know to enhance your Flask web Framework applications.

Templates in Flask
CSRF Protection in Flask
Templating With Jinja2 in Flask
Template Inheritance in Flask
Placeholders in Jinja2 Template 
Flask – Static Files
Uploading and Downloading Files in Flask
Upload File in Python-Flask
Upload Multiple files with Flask
Flask – Message Flashing
Flask WTF
Flask-Mail
User Registration, Login, and Logout in Flask
Master user authentication in Flask Web Framework with this concise guide. Learn registration, login, and logout functionalities using Flask-Login, implement password hashing with Bcrypt, manage sessions, and explore role-based access control. Additionally, discover tips for displaying the current username and handling JSON responses effortlessly.

How To Add Authentication to Your App with Flask-Login
Display Current Username in Flask
Password Hashing with Bcrypt in Flask
How to store username and password in Flask
Flask – Role-Based Access Control
Flask Sessions to server Logout
Flask – JWT
Flask Cookies
Flask – JSON Response
Define and Access the Database in Flask
Delve into the world of database management in Flask with Python this guide. Explore powerful tools like Flask-SQLAlchemy for seamless integration with relational databases like SQLite and PostgreSQL. Learn to send data to MongoDB and execute raw SQL commands with Flask-SQLAlchemy.

Flask-SQLAlchemy
Flask SQLite
Sending Data from a Flask app to MongoDB Database
Making a Flask app using a PostgreSQL Database
Build a Web App using Flask and SQLite in Python
Login and Registration Project Using Flask and MySQL
Execute raw SQL in the Flask-SQLAlchemy
Flask Deployment and Error Handling
Delve into Flask with Python deployment and error handling, covering subdomain management, 404 error handling, deploying Flask apps on Heroku, and incorporating machine learning models seamlessly.

Subdomain in Flask
Handling 404 Error in Flask
Deploy Python Flask App on Heroku
Deploy Machine Learning Model using Flask
Flask Projects
Explore a variety of Flask Web Framework projects, from a todo list app to sentiment analysis on Twitter, showcasing diverse functionalities such as portfolio creation, MySQL integration, and interactive data visualization with graphs and charts.

Todo list app using Flask Python
Single Page Portfolio Using Flask
Profile Application using Python Flask and MySQL
Wikipedia search app using Flask Framework – Python
Twitter Sentiment Analysis WebApp Using Flask
Create Cricket Score API using Web Scraping in Flask
How to Add Graphs to Flask Apps
Add Scatter Chart in Flask
Show Data on Google Pie Chart using Python Flask
Flask Projects Archives 
Must Read – Top 40 Flask Interview Questions and Answers

What is WSGI?
WSGI is an acronym for web server gateway interface which is a standard for Python web framework flask application development. It is considered the specification for the universal interface between the web server and web application.

What is Jinja2?
Jinja2 is a web template engine that combines a template with a certain data source to render dynamic web pages. In Easy Language, It combines a template (the layout of the page) with data (the specific information you want to show) to create a dynamic web page.

FAQs on Flask Tutorial
Q1. Should I learn HTML for Flask?
Answer:

Both are highly recommended in case you are learning to develop web applications.

Q2. Is Flask open source?
Answer:

Yes, Flask and Django both are Free Open Source, Python-based web frameworks that are used for building web applications.

Q3. How do I start a Flask project?
Answer:

Here’s a simplified version of the steps to start a Flask project:

Install Python.
Install Flask by running “pip install flask” in the terminal or command prompt.
Create a virtual environment by running “python -m venv myenv”.
Activate the virtual environment by running “myenv\Scripts\activate.bat” on Windows or “source myenv/bin/activate” on macOS or Linux.
Create a Flask app by importing Flask and creating a new instance of the Flask class.
Define routes by decorating a function with “@app.route(‘/myurl’)” and defining the function to return data or HTML.
Run the app by running “flask run” in the terminal or command prompt.
Q4. What is the default port of Flask?
Answer:

By default, many Flask applications run on port 5000.

Q5. Which company uses Flask?
Answer:

There are many major companies employing Flask and that list includes Netflix, Reddit, Airbnb, Lyft, Mozilla, MIT, Uber, Red Hat, Rackspace, Mailgun, Patreon, Samsung, NGINX, 2market, B2W, and Sieve.

Q6. What is the salary of a Flask Developer in India?
Answer:

As per various resources, the average Salary of a Flask Developer was ranging between 9,00,000 INR – 11,00,000 INR depending upon the experience and skills.


Get 90% Course fee refund in just 90 Days! Also get 1:1 Mock Interview, Job assistance and more additional benefits on selected courses. Take up the Three 90 challenge today!
Don't miss your chance to ride the wave of the data revolution! Every industry is scaling new heights by tapping into the power of data. Sharpen your skills and become a part of the hottest trend in the 21st century.

Dive into the future of technology - explore the Complete Machine Learning and Data Science Program by GeeksforGeeks and stay ahead of the curve.

Introduction to Web development using Flask
Last Updated : 04 Apr, 2024
Flask is a lightweight and flexible web framework for Python. It’s designed to make getting started with web development quick and easy, while still being powerful enough to build complex web applications. Let’s understand Flask Python in more Detail

What is Flask?
Flask is an API of Python that allows us to build web applications. It was developed by Armin Ronacher. Flask’s framework is more explicit than Django’s framework and is also easier to learn because it has less base code to implement a simple web application. Flask Python is based on the WSGI(Web Server Gateway Interface) toolkit and Jinja2 template engine.

Advantages of Flask
 Flask is a lightweight backend framework with minimal dependencies.
 Flask is easy to learn because its simple and intuitive API makes it easy to learn and use for beginners.
 Flask is a flexible Framework because it allows you to customize and extend the framework to suit your needs easily.
 Flask can be used with any database like:- SQL and NoSQL and with any Frontend Technology such as React or Angular.
Flask is great for small to medium projects that do not require the complexity of a large framework.
Flask Documentation
Getting Started With Flask
Python3 is required for the installation of the Python Web Framework Flask. You can start by importing Flask from the Flask Python package on any Python IDE. For installation on any environment, you can click on the installation link given below. To test that if the installation is working, check out the code given below.


from flask import Flask     
app = Flask(__name__)   # Flask constructor 
  
# A decorator used to tell the application 
# which URL is associated function 
@app.route('/')       
def hello(): 
    return 'HELLO'
  
if __name__=='__main__': 
   app.run() 
The ‘/’ URL is bound with hello() function. When the home page of the webserver is opened in the browser, the output of this function will be rendered accordingly. The Flask Python application is started by calling the run() function. The method should be restarted manually for any change in the code. To overcome this, the debug support is enabled so as to track any error.


app.debug = True
app.run() 
app.run(debug = True) 
Build Flask Routes in Python
Nowadays, the web frameworks provide routing technique so that user can remember the URLs. It is useful to access the web page directly without navigating from the Home page. It is done through the following route() decorator, to bind the URL to a function.


# decorator to route URL 
@app.route(‘/hello’) 

# binding to the function of route 
def hello_world():     
    return ‘hello world’ 
If a user visits http://localhost:5000/hello URL, the output of the hello_world() function will be rendered in the browser. The add_url_rule() function of an application object can also be used to bind URL with the function as in above example.


def hello_world():
    return ‘hello world’
  
app.add_url_rule(‘/’, ‘hello’, hello_world)
Variables in Flask
The Variables in thePython Web Framework flask is used to build a URL dynamically by adding the variable parts to the rule parameter. This variable part is marked as. It is passed as keyword argument. See the example below


from flask import Flask 
app = Flask(__name__) 

# routing the decorator function hello_name 
@app.route('/hello/<name>') 
def hello_name(name): 
    return 'Hello %s!' % name 

if __name__ == '__main__': 
app.run(debug = True) 
Save the above example as hello.py and run from power shell. Next, open the browser and enter the URL http://localhost:5000/hello/GeeksforGeeks.

Output

Hello GeeksforGeeks!
In the above example, the parameter of route() decorator contains the variable part attached to the URL ‘/hello’ as an argument. Hence, if URL like http://localhost:5000/hello/GeeksforGeeks is entered then ‘GeeksforGeeks’ will be passed to the hello() function as an argument. In addition to the default string variable part, other data types like int, float, and path(for directory separator channel which can take slash) are also used. The URL rules of Flask Python are based on Werkzeug’s routing module. This ensures that the URLs formed are unique and based on precedents laid down by Apache.


from flask import Flask 
app = Flask(__name__) 

@app.route('/blog/<postID>') 
def show_blog(postID): 
    return 'Blog Number %d' % postID 

@app.route('/rev/<revNo>') 
def revision(revNo): 
    return 'Revision Number %f' % revNo 

if __name__ == '__main__': 
app.run() 
Output

Blog Number 555

# Enter this URL in the browser ? http://localhost:5000/rev/1.1
Revision Number: 1.100000
Build a URL in Flask
Dynamic Building of the URL for a specific function is done using url_for() function. The function accepts the name of the function as first argument, and one or more keyword arguments. See this example


from flask import Flask, redirect, url_for
app = Flask(__name__)


@app.route('/admin')  # decorator for route(argument) function
def hello_admin():  # binding to hello_admin call
    return 'Hello Admin'


@app.route('/guest/<guest>')
def hello_guest(guest):  # binding to hello_guest call
    return 'Hello %s as Guest' % guest


@app.route('/user/<name>')
def hello_user(name):
    if name == 'admin':  # dynamic binding of URL to function
        return redirect(url_for('hello_admin'))
    else:
        return redirect(url_for('hello_guest', guest=name))


if __name__ == '__main__':
app.run(debug=True)
To test this, save the above code and run through python shell and then open browser and enter the following URL:-

Input: http://localhost:5000/user/admin
Output: Hello Admin 

Input: http://localhost:5000/user/ABC
Output: Hello ABC as Guest
The above code has a function named user(name), accepts the value through input URL. It checks that the received argument matches the ‘admin’ argument or not. If it matches, then the function hello_admin() is called else the hello_guest() is called.

HTTP method are provided by Flask
Python Web Framework Flask support various HTTP protocols for data retrieval from the specified URL, these can be defined as:-

Method	Description
GET	This is used to send the data in an without encryption of the form to the server.
HEAD	provides response body to the form
POST	Sends the form data to server. Data received by POST method is not cached by server.
PUT	Replaces current representation of target resource with URL.
DELETE	Deletes the target resource of a given URL
Serve Static Files in Flask
A web application often requires a static file such as javascript or a CSS file to render the display of the web page in browser. Usually, the web server is configured to set them, but during development, these files are served as static folder in your package or next to the module. See the example in JavaScript given below:


from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")


if __name__ == '__main__':
app.run(debug=True)
HTML File (index.html)
This will be inside Templates folder which will be sibling of the python file we wrote above


<html> 

<head> 
    <script type = "text/javascript"
        src = "{{ url_for('static', filename = 'hello.js') }}" ></script> 
</head> 
    
<body> 
    <input type = "button" onclick = "sayHello()" value = "Say Hello" /> 
</body> 
    
</html> 
JavaScript file (hello.js)
This code will be inside static folder which will be sibling of the templates folder.


function sayHello() { 
    alert("Hello World") 
    } 
Object Request of Data from a client’s web page is send to the server as a global request object. It is then processed by importing the Python Web Framework Flask module. These consist of attributes like Form(containing Key-Value Pair), Args(parsed URL after question mark(?)), Cookies(contain Cookie names and Values), Files(data pertaining to uploaded file) and Method(current request).

Cookies in Flask
A Cookie is a form of text file which is stored on a client’s computer, whose purpose is to remember and track data pertaining to client’s usage in order to improve the website according to the user’s experience and statistic of webpage.

The Request object contains cookie’s attribute. It is the dictionary object of all the cookie variables and their corresponding values. It also contains expiry time of itself. In Flask, cookie are set on response object.See the example given below:


from flask import Flask 

app = Flask(__name__) 
@app.route('/') 

def index(): 
    return render_template('index.html') 
HTML code ( index.html )


<html> 
<body> 
    
    <form action = "/setcookie" method = "POST"> 
        <p><h3>Enter userID</h3></p> 
        <p><input type = 'text' name = 'nm'/></p> 
        <p><input type = 'submit' value = 'Login'/></p> 
    </form> 
        
</body> 
</html> 
Add this code to the Python file defined above


@app.route('/setcookie', methods = ['POST', 'GET']) 
def setcookie(): 
if request.method == 'POST': 
    user = request.form['nm'] 
    resp = make_response(render_template('cookie.html')) 
    resp.set_cookie('userID', user) 
    return resp 

@app.route('/getcookie') 
def getcookie(): 
    name = request.cookies.get('userID') 
    return '<h1>welcome '+name+'</h1>'
HTML code ( cookie.html )


<html> 
    <body> 
        <a href="/getcookie">Click me to get Cookie</a> 
</body> 
</html> 
Run the above application and visit link on Browser http://localhost:5000/ The form is set to ‘/setcookie’ and function set contains a Cookie name userID that will be rendered to another webpage. The ‘cookie.html’ contains hyperlink to another view function getcookie(), which displays the value in browser.

Sessions in Flask
In Session, the data is stored on Server. It can be defined as a time interval in which the client logs into a server until the user logs out. The data in between them are held in a temporary folder on the Server. Each user is assigned with a specific

Session ID
The Session object is a dictionary that contains the key-value pair of the variables associated with the session. A SECRET_KEY is used to store the encrypted data on the cookie.

Example

Session[key] = value   // stores the session value
Session.pop(key, None)  // releases a session variable
Other Important Flask Functions

redirect
It is used to return the response of an object and redirects the user to another target location with specified status code.

Syntax: Flask.redirect(location, statuscode, response)
//location is used to redirect to the desired URL //statuscode sends header value, default 302 //response is used to initiate response.

abort
It is used to handle the error in the code.

Syntax:  Flask.abort(code)
The code parameter can take the following values to handle the error accordingly:

400 – For Bad Request
401 – For Unauthenticated
403 – For Forbidden request
404 – For Not Found
406 – For Not acceptable
425 – For Unsupported Media
429 – Too many Requests
File-Uploading in Flask
File Uploading in Python Web Framework Flask is very easy. It needs an HTML form with enctype attribute and URL handler, that fetches file and saves the object to the desired location. Files are temporary stored on server and then on the desired location. The HTML Syntax that handle the uploading URL is :

form action="http://localhost:5000/uploader" method="POST" enctype="multipart/form-data"
And following Python with Flask Code is:


from flask import Flask, render_template, request
from werkzeug import secure_filename

app = Flask(__name__)

@app.route('/upload')
def upload_file():
    return render_template('upload.html')

@app.route('/uploader', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
      f = request.files['file'] 
      f.save(secure_filename(f.filename)) 
      return 'file uploaded successfully'
        
if __name__ == '__main__': 
app.run(debug = True)
Sending Form Data to the HTML File of Server
A Form in HTML is used to collect the information of required entries which are then forwarded and stored on the server. These can be requested to read or modify the form. The Python with flask provides this facility by using the URL rule. In the given example below, the ‘/’ URL renders a web page(student.html) which has a form. The data filled in it is posted to the ‘/result’ URL which triggers the result() function. The results() function collects form data present in request.form in a dictionary object and sends it for rendering to result.html.


from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/')
def student():
    return render_template('student.html')

@app.route('/result', methods=['POST', 'GET'])
def result():
    if request.method == 'POST':
        result = request.form
        return render_template("result.html", result=result)

if __name__ == '__main__':
app.run(debug=True)
HTML Code ( result.html )


<!doctype html> 
<html> 
<body> 
    
    <table border = 1> 
        {% for key, value in result.items() %} 
        
            <tr> 
            <th> {{ key }} </th> 
            <td> {{ value }} </td> 
            </tr> 
            
        {% endfor %} 
    </table> 
        
</body> 
</html> 
HTML Code ( student.html )


<html> 
<body> 
    
    <form action = "http://localhost:5000/result" method = "POST"> 
        <p>Name <input type = "text" name = "Name" /></p> 
        <p>Physics <input type = "text" name = "Physics" /></p> 
        <p>Chemistry <input type = "text" name = "chemistry" /></p> 
        <p>Maths <input type ="text" name = "Maths" /></p> 
        <p><input type = "submit" value = "submit" /></p> 
    </form> 
</body> 
</html> 

Alert messages in Flask
It can be defined as a pop-up or a dialog box that appears on the web-page or like alert in JavaScript, which are used to inform the user. This in flask can be done by using the method flash() in Flask. It passes the message to the next template.

Syntax: flash(message, category)
message is actual text to be displayed and category is optional which is to render any error or info.

Example


from flask import Flask
app = Flask(__name__)

# /login display login form


@app.route('/login', methods=['GET', 'POST'])
# login function verify username and password
def login():
    error = None

    if request.method == 'POST':
        if request.form['username'] != 'admin' or \
                request.form['password'] != 'admin':
            error = 'Invalid username or password. Please try again !'
        else:

            # flashes on successful login
            flash('You were successfully logged in')
            return redirect(url_for('index'))
    return render_template('login.html', error=error)


Differences Between Django vs Flask
Django and Flask are two of the most popular web frameworks for Python. Flask showed up as an alternative to Django, as designers needed to have more flexibility that would permit them to decide how they want to implement things, while on the other hand, Django does not permit the alteration of their modules to such a degree. Flask is truly so straightforward and direct that working in it permits an experienced Python designer to make ventures inside truly tight timeframes. 

Introduction to Django
Django is commonly called a “batteries-included” system approach—or the “framework for fussbudgets with deadlines.” This implies that Django makes it simple for Python designers to jump into web applications rapidly without requiring planning into the app’s framework ahead of time. Essentially, construct superior web apps, more rapidly, with less code. Django is set up, has great documentation, and has a huge online community. 

Here are a few Django use cases
Django is incredible for building complex destinations with energetic substance, with adaptability in intellect; enormous ventures that require out-of-the-box arrangements can be sent truly quickly. Flask is idealized for creating straightforward web apps Django permits sending more complicated web apps quicker, as its modules are preconfigured to supply quick app improvement and arrangement. 

VPS servers provide a foundational environment and set of capabilities for integrating Django apps with developer tools and APIs. With Hostinger VPS services, you have greater flexibility and control over your hosting environment, and you get far more value for your money.

Hostinger offers VPS templates with the most popular frameworks and CMS preinstalled. Applications built with Node.js, Django, Rails, WordPress, Joomla, and Drupal can be chosen and launched quickly.

4 active plans with prices ranging from ₹499/mo to ₹1829/mo :

KVM1
KVM2
KVM4
KVM8
These are designed to satisfy various needs. The KVM2 plan is the most affordable and well-liked by users of lightweight apps.

Full root access, support for many operating systems, excellent performance, improved security and backup, one-click application, and scalability are features of Hostinger’s VPS service.

What is Flask Python?
Flask may be a generally youthful framework, as it were in utilization since 2010. Flask is considered more “Pythonic” than Django is basically since Flask web application code is, in most cases, more unequivocal. Flask is the choice of most tenderfoots due to the need for barricades to get a basic app up and running. 

Here are a few Flask use cases
Flask is extraordinary for building basic locales with inactive substance, like blogs; it gives all the usefulness you would like and permits customization to a tremendous degree.

Difference Between Django and Flask
Admin Interface
The useful admin interface is what makes Django a capable web system. Not at all like Flask, Django incorporates a ready-to-use admin system that empowers clients to carry out extended organization errands consistently. Based on the venture, it naturally creates admin modules. Engineers can indeed customize the admin interface in arrange to meet particular trade needs. 

Database
Django has to bolster the ORM framework. Advantage of the ORM framework includes: Developers can take advantage of the ORM framework to work with an assortment of databases, including PostgreSQL, SQLite, Prophet, MySQL, and more. Developers don’t have to type in long SQL inquiries to execute common database operations. Whereas, Flask doesn’t support the ORM framework. Designers are required to type in SQLAlchemy (Protest Social Mapper and SQL toolkit for Python) in arrange to perform common database operations. 

Built-in template engine
Not at all like Django, Flask doesn’t have a built-in layout motor. Flask is based on the Jinja2 format motor. Jinja2 is itself impacted by the Django format motor. Its employments coordinate a sandboxed execution environment, permitting engineers to speed up the advancement handle for energetic web applications. While Django incorporates a built-in format motor that permits engineers to make user-facing layers for web applications consistently nd quickly. 

Project Structure
Django enforces a specific project structure, including a predefined directory layout. This can be helpful for maintaining consistency in larger teams or projects. Django projects typically have a well-defined structure with apps, templates, and settings where Flask is unopinionated about project structure, allowing developers to organize their code in a way that makes sense to them. While this flexibility can be liberating, it may require more planning and discipline in larger projects.

Use Cases
Django is well-suited for building large, complex web applications that require a lot of built-in features, such as content management systems (CMS), e-commerce platforms, and social networks. It shines in projects where rapid development and scalability are important where Flask is often chosen for smaller to medium-sized projects and APIs. It is a good fit for building RESTful APIs, microservices, and prototypes. Flask gives developers more control to pick and choose the libraries and components they need for their specific use case.

Support of Extra Integrations 
Third-party apps are not supported by Flask, while in contrast, Django is compatible with a wide range of third-party apps.

Django

Flask

Django could be a Python-based free, open-source system that takes after the MVT(model view Template) approach of structural design	Flask could be a Python-based smaller-scale system without any set of specific instruments or outside libraries. It too doesn’t have a database layer or arrangements for shape approval and makes utilize of expansions.
Urls.py is utilized to set the association properties and demands are handled by the primary coordinating see of the regex list	URI is most regularly than not set by the see decorator and centralized setup is additionally conceivable. Sometimes the recent designs are coordinated with the URIs, and the last mentioned is sorted in a default arrange
Doesn’t exclude setting flexibility	It is accepted that all the conceptual stages to organize a Flask code rise and smaller-scale open-source to the applications number show in Flask as of now
Extend Layout is a Conventional extended structure	Extend Layout is an Arbitrary structure
Django gives an all-inclusive encounter: you get an admin board, database interfacing, an ORM, and a registry structure for your apps and ventures out of the box.	Flask gives straightforwardness, adaptability, and fine-grained control. It is unopinionated
Django provides built-in authentication and authorization systems, making it easier to implement user management and access control.

Flask leaves authentication and authorization to the developer. You can use third-party libraries like Flask-Login and Flask-Principal for these functionalities.

It is suitable for multi-page applications.	It is suitable for single-page applications only.
Its framework structure is more conventional.	Random web framework structure.
Django has a large and active community, which means access to extensive documentation, tutorials, and third-party packages. It is widely used in various industries.

Flask also has a thriving community, but it may have fewer resources compared to Django. Flask’s simplicity attracts developers who prefer to keep their stack minimal.

It doesn’t support any virtual debugging.	It has a built-in debugger that provides virtual debugging.
Its working style is Monolithic.	Its working style is diversified style.


How to Install Flask in Windows?
Last Updated : 21 Jun, 2023
Flask is basically a Python module. It can work with Python only and it is a web-developing framework. It is a collection of libraries and modules. Frameworks are used for developing web platforms. Flask is such a type of web application framework. It is completely written in Python language. Unlike Django, it is only written in Python. As a new user, Flask is to be used. As it is easier to handle. As it is only written in Python, before installing Flask on the machine, Python should be installed previously.  

Features of Python Flask:

Flask is easy to use and easily understandable for new users in Web Framework.
It can also be used as any third-party plugin extension.
It is also used for prototyping purposes.
Install Virtual Environment
We use a module named virtualenv which is a tool to create isolated Python environments. virtualenv creates a folder that contains all the necessary executables to use the packages that a Python project would need.

pip install virtualenv
Create Python virtual environment

Go to the local directory where you want to create your Flask app.

virtualenv venv
Activate a virtual environment based on your OS

For windows > venv\Scripts\activate
For linux > source ./venv/bin/activate
Install Virtual Environment
 

Install Flask on Windows or Linux
Step 1: Make sure that Python PIP should be installed on your OS. You can check using the below command.

pip -V
or
pip --version
Step 2: At first, open the command prompt in administrator mode. Then the following command should be run. This command will help to install Flask using Pip in Python and will take very less time to install. According to the machine configuration, a proper Flask version should be installed. Wait for some time till the process is completed. After completion of the process, Flask is completed successfully, the message will be displayed. Hence Installation is successful.

pip install flask
Install Flask on Windows
 

Step 3: After that, also the following two commands should be run. These commands will start Flask in the command prompt. Hence, the process is completed successfully.

python
import flask

Flask Quick start 

Flask – (Creating first simple application)
Last Updated : 15 Apr, 2023
Building a webpage using python.
There are many modules or frameworks which allow building your webpage using python like a bottle, Django, Flask, etc. But the real popular ones are Flask and Django. Django is easy to use as compared to Flask but Flask provides you with the versatility to program with.
To understand what Flask is you have to understand a few general terms. 

WSGI Web Server Gateway Interface (WSGI) has been adopted as a standard for Python web application development. WSGI is a specification for a universal interface between the web server and the web applications. 
Werkzeug It is a WSGI toolkit, which implements requests, response objects, and other utility functions. This enables building a web framework on top of it. The Flask framework uses Werkzeug as one of its bases.
jinja2 jinja2 is a popular templating engine for Python. A web templating system combines a template with a certain data source to render dynamic web pages. 
Flask is a web application framework written in Python. Flask is based on the Werkzeug WSGI toolkit and Jinja2 template engine. Both are Pocco projects.

Installation:

We will require two packages to set up your environment. virtualenv for a user to create multiple Python environments side-by-side. Thereby, it can avoid compatibility issues between the different versions of the libraries and the next will be Flask itself. 

virtualenv 

pip install virtualenv
Create Python virtual environment

virtualenv venv
Activate virtual environment

windows > venv\Scripts\activate
linux > source ./venv/bin/activate
For windows, if this is your first time running the script, you might get an error like below:

venv\Scripts\activate : File C:\flask_project\venv\Scripts\Activate.ps1 cannot be loaded because running scripts is disabled on this system. For  
more information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:1
+ venv\Scripts\activate
   + FullyQualifiedErrorId : UnauthorizedAccess

This means that you don’t have access to execute the scripts.

To solve this error, run the powershell as admin, when you right click on powershell icon, choose the option ‘Run as adminstrator’. Now, the powershell will open in the admin mode.

Type the following command in Shell

set-executionpolicy remotesigned

Now, you will be prompted to change the execution policy. Please type A. This means Yes to all.

Flask 

pip install Flask
After completing the installation of the package, let’s get our hands on the code.


# Importing flask module in the project is mandatory
# An object of Flask class is our WSGI application.
from flask import Flask
 
# Flask constructor takes the name of 
# current module (__name__) as argument.
app = Flask(__name__)
 
# The route() function of the Flask class is a decorator, 
# which tells the application which URL should call 
# the associated function.
@app.route('/')
# ‘/’ URL is bound with hello_world() function.
def hello_world():
    return 'Hello World'
 
# main driver function
if __name__ == '__main__':
 
    # run() method of Flask class runs the application 
    # on the local development server.
    app.run()
Save it in a file and then run the script we will be getting an output like this.



Then go to the URL given there you will see your first webpage displaying hello world there on your local server.
Digging further into the context, the route() decorator in Flask is used to bind a URL to a function. Now to extend this functionality our small web app is also equipped with another method add_url_rule() which is a function of an application object that is also available to bind a URL with a function as in the above example, route() is used. 

Example: 

def gfg():
   return ‘geeksforgeeks’
app.add_url_rule(‘/’, ‘g2g’, gfg)
Output: 

geeksforgeeks
You can also add variables in your web app, well you might be thinking about how it’ll help you, it’ll help you to build a URL dynamically. So let’s figure it out with an example.


from flask import Flask
app = Flask(__name__)
 
@app.route('/hello/<name>')
def hello_name(name):
   return 'Hello %s!' % name
 
if __name__ == '__main__':
   app.run()
And go to the URL http://127.0.0.1:5000/hello/geeksforgeeks it’ll give you the following output.



We can also use HTTP methods in Flask let’s see how to do that
The HTTP protocol is the foundation of data communication on the world wide web. Different methods of data retrieval from specified URL are defined in this protocol. The methods are described down below.

GET : Sends data in simple or unencrypted form to the server.
HEAD : Sends data in simple or unencrypted form to the server without body. 
HEAD : Sends form data to the server. Data is not cached.
PUT : Replaces target resource with the updated content.
DELETE : Deletes target resource provided as URL.

By default, the Flask route responds to the GET requests. However, this preference can be altered by providing methods argument to route() decorator. In order to demonstrate the use of the POST method in URL routing, first, let us create an HTML form and use the POST method to send form data to a URL. Now let’s create an HTML login page.

Below is the source code of the file: 

<html>
   <body>      
      <form action = "http://localhost:5000/login" method = "post">
          
 
<p>Enter Name:</p>
 
 
          
 
<p><input type = "text" name = "nm" /></p>
 
 
          
 
<p><input type = "submit" value = "submit" /></p>
 
 
      </form>      
   </body>
</html>
Now save this file HTML and try this python script to create the server.

from flask import Flask, redirect, url_for, request
app = Flask(__name__)
 
 
@app.route('/success/<name>')
def success(name):
    return 'welcome %s' % name
 
 
@app.route('/login', methods=['POST', 'GET'])
def login():
    if request.method == 'POST':
        user = request.form['nm']
        return redirect(url_for('success', name=user))
    else:
        user = request.args.get('nm')
        return redirect(url_for('success', name=user))
 
 
if __name__ == '__main__':
    app.run(debug=True)
After the development server starts running, open login.html in the browser, enter your name in the text field and click submit button. The output would be the following.



The result will be something like this



And there’s much more to Flask than this. If you are interested in this web framework of Python you can dig into the links provided down below for further information.

How to Run a Flask Application
Last Updated : 20 Dec, 2023
The backend server Flask was created fully in Python. It is a framework made up of Python modules and packages. With its characteristics, it is a lightweight Flask application that speeds up the development of backend apps. We will learn how to execute a Flask application in this tutorial.

Run Flask application Syntax
We can run the Flask application using the below command.

flask –app <hello> run

flask run

python <app_name>.py

File Structure

Here, we are using the following folder and file.
Run a Flask Application
In this example, we have an application called helloworld.py below is the basic code for Flask. 

# import flast module
from flask import Flask
 
# instance of flask application
app = Flask(__name__)
 
# home route that returns below text when root url is accessed
@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"
 
if __name__ == '__main__':  
   app.run()
Output:

Using flask –app <app_name> run

Using flask run


Using the python app_name.py

Run the app in the debugger
We will use the below command to run the flask application with debug mode as on. When debug mode is turned on, It allows developers to locate any possible error and as well the location of the error, by logging a traceback of the error.

if __name__ == ‘__main__’:  
  app.run(debug = True)

Flask App Routing
Last Updated : 10 Mar, 2023
App Routing means mapping the URLs to a specific function that will handle the logic for that URL. Modern web frameworks use more meaningful URLs to help users remember the URLs and make navigation simpler. 

Example: In our application, the URL (“/”) is associated with the root URL. So if our site’s domain was www.example.org and we want to add routing to “www.example.org/hello”, we would use “/hello”. 

To bind a function to an URL path we use the app.route decorator. In the below example, we have implemented the above routing in the flask.

from flask import Flask 
  
app = Flask(__name__) 
  
# Pass the required route to the decorator. 
@app.route("/hello") 
def hello(): 
    return "Hello, Welcome to GeeksForGeeks"
    
@app.route("/") 
def index(): 
    return "Homepage of GeeksForGeeks"
  
if __name__ == "__main__": 
    app.run(debug=True) 
The hello function is now mapped with the “/hello” path and we get the output of the function rendered on the browser.

Step to run the application: Run the application using the following command.

python main.py
Output: Open the browser and visit 127.0.0.1:5000/hello, you will see the following output.



Dynamic URLs – We can also build dynamic URLs by using variables in the URL. To add variables to URLs, use <variable_name> rule. The function then receives the <variable_name> as keyword argument.

Example: Consider the following example to demonstrate the dynamic URLs.

from flask import Flask 
  
app = Flask(__name__) 
  
@app.route('/user/<username>') 
def show_user(username): 
    # Greet the user 
    return f'Hello {username} !'
  
# Pass the required route to the decorator. 
@app.route("/hello") 
def hello(): 
    return "Hello, Welcome to GeeksForGeeks"
    
@app.route("/") 
def index(): 
    return "Homepage of GeeksForGeeks"
  
if __name__ == "__main__": 
    app.run(debug=True)
Step to run the application: Run the application using the following command.

python main.py
Output: Open the browser and visit 127.0.0.1:5000/user/geek, you will see the following output.



Additionally, we can also use a converter to convert the variable to a specific data type. By default, it is set to string values. To convert use <converter:variable_name> and following converter types are supported.

string: It is the default type and it accepts any text without a slash.
int: It accepts positive integers.
float: It accepts positive floating-point values.
path: It is like a string but also accepts slashes.
uuid: It accepts UUID strings.
Example: Consider the following example to demonstrate the converter type.

from flask import Flask 
  
app = Flask(__name__) 
  
@app.route('/post/<int:id>') 
def show_post(id): 
    # Shows the post with given id. 
    return f'This post has the id {id}'
  
@app.route('/user/<username>') 
def show_user(username): 
    # Greet the user 
    return f'Hello {username} !'
  
# Pass the required route to the decorator. 
@app.route("/hello") 
def hello(): 
    return "Hello, Welcome to GeeksForGeeks"
    
@app.route("/") 
def index(): 
    return "Homepage of GeeksForGeeks"
  
if __name__ == "__main__": 
    app.run(debug=True)
Step to run the application: Run the application using the following command.

python main.py
Output: Open the browser and visit 127.0.0.1:5000/post/13, you will see the following output.



The add_url_rule() function – The URL mapping can also be done using the add_url_rule() function. This approach is mainly used in case we are importing the view function from another module. In fact, the app.route calls this function internally. 

Syntax:

add_url_rule(<url rule>, <endpoint>, <view function>) 
Example: In the below example, we will try to map the show_user view function using this approach.

from flask import Flask 
  
app = Flask(__name__) 
  
def show_user(username): 
    # Greet the user 
    return f'Hello {username} !'
    
app.add_url_rule('/user/<username>', 'show_user', show_user) 
  
if __name__ == "__main__": 
    app.run(debug=True)
Step to run the application: Run the application using the following command.

python main.py
Output: Open the browser and visit 127.0.0.1:5000/user/pulkit, you will see the following output.


Flask – HTTP Method
Last Updated : 28 Mar, 2024
In this article, we will learn how to handle HTTP methods, such as GET and POST in Flask using Python. Here, we will understand the concept of HTTP, GET, and HTTP POST, and then we will the example and implement each in Flask. Before starting let’s understand the basic terminology:

GET: to request data from the server.
POST: to submit data to be processed to the server.
PUT: A PUT request is used to modify the data on the server. It replaces the entire content at a particular location with data that is passed in the body payload. If there are no resources that match the request, it will generate one.
PATCH: PATCH is similar to a PUT request, but the only difference is, it modifies a part of the data. It will only replace the content that you want to update.
DELETE: A DELETE request is used to delete the data on the server at a specified location.
Related Article: Flask HTTP methods, Handle GET & POST requests

Flask HTTP Methods
In a Client-Server architecture, there is a set of rules, called a protocol, using which, we can allow the clients, to communicate with the server, and, vice-versa. Here, the Hyper Text Transfer Protocol is used, through which, communication is possible. For example, Our browser, passes our query, to the Google server, receiving which, the Google server, returns relevant suggestions. The commonly used HTTP methods, for this interconnection, are – GET and POST.4

GET Method in Flask
The request we type, in the browser address bar, say: ‘http://google.com’ is called the Uniform Resource Locator.  It mentions the address we are looking for, in this case, the Google landing(starting) page.  The browser, sends a GET request, to the Google server, which returns the starting webpage, in response. The GET request is simply used, to fetch data from the server. It should not be used, to apply changes, to the server data.

File Structure


post
File Structure



Example of HTTP GET in Flask
Let us discuss, the execution of the GET method, using the Flask library. In this example, we will consider, a landing page, that gives us facts, about Math calculations, and, allows us to enter a number, and, return its square. Let us see the example:

Step 1: The ‘squarenum.html‘ file, has a form tag, that allows the user to enter a number. The form data is sent, to the page mentioned, in the ‘action’ attribute. Here, the data is sent, to the same page, as indicated by ‘#’. Since we are using the GET method, the data will be appended, to the URL, in the name-value pair format. So, if we enter number 12, and, click on Submit button, then data will be appended, as ‘http://localhost:5000/square?num=12&btnnum=Submit#’ 


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Square Of Number!</title>
</head>
<body>
<h1><i> Welcome to the Maths page!</i></h1>
    <p>Logic shapes every choice of our daily lives.<br>
    Logical thinking enables someone to learn and
    make decisions that affect their way of life. !</p>
    <form method="GET" action ="#">
        Enter a number :
        <input type="text" name="num" id="num"></input>
        <input type="submit" name="btnnum" id="btnnum"></input>
  </form>
</body>
</html>
Step 2: The answer.html code file looks as follows:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Answer Page!</title>
</head>
<body>
    <h1>Keep Learning Maths!</h1>
    <h2>Square of number {{num}} is :{{squareofnum}}</h2>
</body>
</html>
Step 3:  Here, we have written a view function, called ‘squarenumber’. The view function returns an HTTP response. The function is decorated with ‘app.route(‘/square’)’. This decorator, matches the incoming request URLs,  to the view functions. Thus, incoming requests like ‘localhost:5000/’ will be mapped to the view squarenumber() function. 

In this case, we have used a GET, hence we mention ‘methods=[‘GET’]’ in the app.route decorator. The HTML form will append the number, entered by the user, in the URL. Hence, we check if data is present. To do so, we have to use the if-elif-else logic. When data is not present, the value of argument  “num”  will be None. Here, we will display, the webpage to the user. If the user has not entered, any number, and right away clicked the Submit button, then, we have displayed the error message. We have to use the Flask Jinja2 template, to pass the result, and, the number entered into the HTML file.


# import the Flask library
from flask import Flask, render_template, request
 
 
# Create the Flask instance and pass the Flask 
# constructor the path of the correct module
app = Flask(__name__)
 
# The URL  'localhost:5000/square' is mapped to
# view function 'squarenumber'
# The GET request will display the user to enter 
# a number (coming from squarenum.html page)
 
 
@app.route('/square', methods=['GET'])
def squarenumber():
    # If method is GET, check if  number is entered 
    # or user has just requested the page.
    # Calculate the square of number and pass it to 
    # answermaths method
    if request.method == 'GET':
   # If 'num' is None, the user has requested page the first time
        if(request.args.get('num') == None):
            return render_template('squarenum.html')
          # If user clicks on Submit button without 
          # entering number display error
        elif(request.args.get('num') == ''):
            return "<html><body> <h1>Invalid number</h1></body></html>"
        else:
          # User has entered a number
          # Fetch the number from args attribute of 
          # request accessing its 'id' from HTML
            number = request.args.get('num')
            sq = int(number) * int(number)
            # pass the result to the answer HTML
            # page using Jinja2 template
            return render_template('answer.html', 
                                   squareofnum=sq, num=number)
 
 
# Start with flask web app with debug as
# True only if this is the starting page
if(__name__ == "__main__"):
    app.run(debug=True)
Output:

GET Method in Flask
GET Method in Flask
The user requests ‘localhost:5000/square’ and enters a number

On clicking the Submit button, one can notice, the value entered, appended, to the URL, and, the output displayed.

GET Method in Flask
Data entered is appended in the URL and output is displayed.

POST Method in Flask
Suppose, we need to register our details, to a website, OR, upload our files, we will send data, from our browser(the client) to the desired server. The HTTP method, preferred here, is POST. The data sent, from HTML, is then saved, on the server side, post validation. The POST method should be used, when we need to change/add data,  on the server side.

File Structure


pl
File Structure



Example of HTTP POST in Flask
In this example, we will consider, the same landing page, giving us facts, about Math calculations, and, allowing us to enter a number, and, return its square. Let us see the example:

Step 1: The same HTML page, called ‘squarenum.html‘, is in the templates folder. At the backend side, we will write, appropriate logic, in a view function, to get the number, entered by the user, and, return the same, in the ‘answer.html’ template. The frontend code file is as shown below:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Square Of Number!</title>
</head>
<body>
<h1><i> Welcome to the Maths page!</i></h1>
    <p>Logic shapes every choice of our daily lives.<br>
    Logical thinking enables someone to learn and
    make decisions that affect their way of life. !</p>
    <form method="POST" action ="#">
        Enter a number :
        <input type="text" name="num" id="num"></input>
        <input type="submit" name="btnnum" id="btnnum"></input>
  </form>
</body>
</html>
Step 2:  The view function squarenumber(), now also contains value POST in the ‘methods’ attribute, in the decorator. Thus, when the user requests the page, the first time, by calling “http://localhost:5000/square”, a GET request will be made. Here, the server will render, the corresponding “squarenum.html”, webpage. After clicking on Submit, on entering a number, the data is posted back, to the same webpage. Here, the POST method, sends data, in the message body, unlike GET, which appends data in the URL. In the view function, the If-Else condition block, retrieves the number, by accessing the ‘form’ attribute, of the request. The square of the number is calculated, and, the value is passed to the same “answer.html” webpage, using the Jinja2 template.


# import the Flask library
from flask import Flask, render_template, request


# Create the Flask instance and pass the Flask constructor the path of the correct module
app = Flask(__name__)


@app.route('/', methods=['GET', 'POST'])
def squarenumber():
 # If method is POST, get the number entered by user
 # Calculate the square of number and pass it to answermaths 
    if request.method == 'POST':
        if(request.form['num'] == ''):
            return "<html><body> <h1>Invalid number</h1></body></html>"
        else:
            number = request.form['num']
            sq = int(number) * int(number)
            return render_template('answer.html', 
                            squareofnum=sq, num=number)
    # If the method is GET,render the HTML page to the user
    if request.method == 'GET':
        return render_template("squarenum.html")


# Start with flask web app with debug as True only 
# if this is the starting page
if(__name__ == "__main__"):
    app.run(debug=True)
Output:

GET Method in Flask
GET Method in Flask
The user enters a number when the page is rendered for URL ‘localhost:5000/square’

On clicking the Submit button, the data is posted back, to the server, and, the result page is rendered. Please note, the value entered, is not visible in the URL now, as the method used, is POST.

Flask – Variable Rule
Last Updated : 05 Jan, 2023
In this article, we will discuss Flask-Variable Rule using Python. Flask is a microweb framework written in Python it is classified as a micro framework because it doesn’t require particular tools or libraries, and it has no database abstraction layer form validation or any other components where pre-existing third-party libraries provide common functions it is designed to make getting started quick and easy with the ability to scale up complex application. 

Flask -Variable Rules:

By using variable rules we can create a dynamic URL by adding variable parts, to the rule parameter.
We can define variable rule by <variable-name> using this syntax in our code.
Variable is always passed as a keyword argument to the function with which the rule is properly associated.
Dynamic URLs Variable In Flask
The following converters are available in Flask-Variable Rules:

String – It accepts any text without a slash(the default).
int – accepts only integers. ex =23 
float – like int but for floating point values ex. = 23.9
path – like the default but also accepts slashes.
any – matches one of the items provided.
UUID = accepts UUID strings.
Simple flask program
In this code, we import the first Flask and then we initialize the Flask function and then we return the simple welcome line we need to run the Flask run command in the terminal to execute our code.


# first we import flask
from flask import Flask
 
# Initialize flask function
app = Flask(__name__)
 
 
@app.route('/')
def msg():
    return "Welcome To The GreeksForGreeks"
 
 # we run code in debug mode
 app.run(debug=True)
Output:

Flask - Variable Rule
 

String Variable in Flask
In this code, we import the first Flask and then we initialize the Flask function after that we made a string function string is already defined in the code we don’t need to specify the string and then we execute our code by a run in the terminal Flask run. and in URL we need to write 127.0.0.1:5000/vstring/<name> to run our vstring function.


# First we import flask
from flask import Flask
 
# initialize flask
app = Flask(__name__)
 
# Display first simple welcome msg
@app.route('/')
def msg():
    return "Welcome"
 
# We defined string  function
@app.route('/vstring/<name>')
def string(name):
    return "My Name is %s" % name
 
# we run app debugging mode
app.run(debug=True)
Output :

Flask - Variable Rule
 

Integer Variable in Flask
In this code, we import the first Flask, and then we initialize the Flask function after that we made an int function, int is not defined in a Flask so we need to first define it then we return the int function and run Flask run in terminal and for int page, we need to write function name in URL and also the integer value.


# first we import flask
from flask import Flask
 
# Initialize flask function
app = Flask(__name__)
 
@app.route('/')
def msg():
    return "Welcome"
 
# define int function
@app.route('/vint/<int:age>')
def vint(age):
    return "I am %d years old " % age
 
# we run our code in debug mode
app.run(debug=True)
Output:

Flask - Variable Rule
 

Float Variable in Flask
In this code, we import the first Flask and then we initialize the Flask function after that we made a float function float is not defined in a Flask so we need to first define it then return the float function and run the Flask run in the terminal and for float page, we need to write function name in URL and also the floating value.


# first we import flask
from flask import Flask
 
# Initialize flask function
app = Flask(__name__)
 
@app.route('/')
def msg():
    return "Welcome"
 
# define float function
@app.route('/vfloat/<float:balance>')
def vfloat(balance):
    return "My Account Balance %f" % balance
 
 # we run our code in debugging mode
app.run(debug=True)
Output:


Redirecting to URL in Flask
Last Updated : 21 Jun, 2023
Flask is a backend server that is built entirely using Python. It is a  framework that consists of Python packages and modules. It is lightweight which makes developing backend applications quicker with its features. In this article, we will learn to redirect a URL in the Flask web application.

Redirect to a URL in Flask
A redirect is used in the Flask class to send the user to a particular URL with the status code. conversely, this status code additionally identifies the issue. When we access a website, our browser sends a request to the server, and the server replies with what is known as the HTTP status code, which is a three-digit number.

Syntax of Redirect in Flask
Syntax: flask.redirect(location,code=302)

Parameters:

location(str): the location which URL directs to.
code(int): The status code for Redirect.
Code: The default code is 302 which means that the move is only temporary.
Return: The response object and redirects the user to another target location with the specified code.

The different  types of HTTP codes are:

Code	
Status

300	Multiple_choices
301	Moved_permanently
302	Found
303	See_other
304	Not_modified
305	Use_proxy
306	Reserved
307	Temporary_redirect
How To Redirect To Url in Flask
In this example, we have created a sample flask application app.py. It has two routes, One is the base route \ and another is \helloworld route. Here when a user hits the base URL \ (root) it will redirect to \helloworld.

app.py

# import flast module
from flask import Flask, redirect
 
# instance of flask application
app = Flask(__name__)
 
# home route that redirects to 
# helloworld page
@app.route("/")
def home():
    return redirect("/helloworld")
 
# route that returns hello world text
@app.route("/helloworld")
def hello_world():
    return "<p>Hello, World from \
                redirected page.!</p>"
 
 
if __name__ == '__main__':
    app.run(debug=True)
Output:

We hit the base URL in the browser as shown below. As soon we hit the URL flask application returns the redirect function and redirects to the given URL.


 


 

url_for() Function in Flask
Another method you can use when performing redirects in Flask is the url_for() function URL building. This function accepts the name of the function as the first argument, and the function named user(name) accepts the value through the input URL. It checks whether the received argument matches the ‘admin’ argument or not. If it matches, then the function hello_admin() is called else the hello_guest() is called.

from flask import Flask, redirect, url_for
 
app = Flask(__name__)
 
# decorator for route(argument) function
@app.route('/admin')
# binding to hello_admin call
def hello_admin():
    return 'Hello Admin'
 
@app.route('/guest/<guest>')
# binding to hello_guest call
def hello_guest(guest):
    return 'Hello %s as Guest' % guest
 
@app.route('/user/<name>')
def hello_user(name):
 
    # dynamic binding of URL to function
    if name == 'admin':
        return redirect(url_for('hello_admin'))
    else:
        return redirect(url_for('hello_guest'
                                , guest=name))
 
if __name__ == '__main__':
    app.run(debug=True)
Output:


hello_guest function


hello_user function

Related Article:  Python Flask – Redirect and Errors


Python Flask – Redirect and Errors
Last Updated : 07 Nov, 2022
We’ll discuss redirects and errors with Python Flask in this article. A redirect is used in the Flask class to send the user to a particular URL with the status code. conversely, this status code additionally identifies the issue. When we access a website, our browser sends a request to the server, and the server replies with what is known as the HTTP status code, which is a three-digit number, The different reasons for errors are:

Unauthorized access or poor request.
Unsupported media file types.
Overload of the backend server.
Internal hardware/connection error.
Syntax of Redirect
flask.redirect(location,code=302)

Parameters:

location(str): the location which URL directs to.
code(int): The status code for Redirect.
Code: The default code is 302 which means that the move is only temporary.
Return: The response object and redirects the user to another target location with the specified code.

The different  types of HTTP codes are:

Code	
Status

300	Multiple_choices
301	Moved_permanently
302	Found
303	See_other
304	Not_modified
305	Use_proxy
306	Reserved
307	Temporary_redirect
Import the redirect attribute
We can redirect the URL using Flask by importing redirect. Let’s see how to import redirects from Flask

from flask import redirect
Example:

Let’s take a simple example to redirect the URL using a flask named app.py.

# importing redirect 
from flask import Flask, redirect, url_for, render_template, request 
  
# Initialize the flask application 
app = Flask(__name__) 
  
# It will load the form template which  
# is in login.html 
@app.route('/') 
def index(): 
    return render_template("login.html") 
  
  
@app.route('/success') 
def success(): 
    return "logged in successfully"
  
# loggnig to the form with method POST or GET 
@app.route("/login", methods=["POST", "GET"]) 
def login(): 
    
    # if the method is POST and Username is admin then 
    # it will redirects to success url. 
    if request.method == "POST" and request.form["username"] == "admin": 
        return redirect(url_for("success")) 
  
    # if the method is GET or username is not admin, 
    # then it redirects to index method. 
    return redirect(url_for('index')) 
  
  
if __name__ == '__main__': 
    app.run(debug=True) 
login.html

Create a folder named templates. In the templates, creates a templates/login.html file. On this page, we will take input from the user of its username.


<!DOCTYPE html> 
<html lang="en"> 
   <body> 
      <form method="POST", action="\login"> 
         Username: <input  name=username type=text></input><br> 
         <button type="submit">Login</button> 
      </form> 
   </body> 
</html>
Now we will deploy our code.

python app.py
Output:


 

Case 1: If the Username is admin and the method is POST then it will redirect to the success URL  and display logged in successfully.


 


 

Case 2: In the other case, if the Username is something like xyz or anything then it will redirect to the index method i.e., it will load the form again until the username is admin.


 

Flasks Errors
If there is an error in the address or if there is no such URL then Flask has an abort() function used to exit with an error code.

Syntax of abort() method
Syntax: abort(code, message)

code: int, The code parameter takes any of the following values
message: str, create your custom message Error.
The different types of errors we can abort in the application in your Flask. 

Code	
Error

400	Bad request
401	Unauthenticated
403	Forbidden
404	Not Found
406	Not Acceptable
415	Unsupported Media Type
429	Too Many Requests
Example to demonstrate abort
In this example, if the username starts with a number then an error code message will through, else on success “Good username” will be printed.

Example 1:

# importing abort 
from flask import Flask, abort 
  
# Initialize the flask application 
app = Flask(__name__) 
  
  
@app.route('/<uname>') 
def index(uname): 
    if uname[0].isdigit(): 
        abort(400) 
    return '<h1>Good Username</h1>'
  
  
if __name__ == '__main__': 
    app.run()
Output:

Case 1: If the username doesn’t start with a number.


 

Case 2: If the username starts with a number.

Flask Redirect and Errors
 

Example 2:

In the above Python code, the status code to the abort() is 400, so it raises a Bad Request Error. Let’s try to change the code to 403. If the username starts with a number then it raises a Forbidden Error.

# importing abort 
from flask import Flask, abort 
  
# Initialize the flask application 
app = Flask(__name__) 
  
  
@app.route('/<uname>') 
def index(uname): 
    if uname[0].isdigit(): 
        abort(403) 
    return '<h1>Good Username</h1>'
  
  
if __name__ == '__main__': 
    app.run()

How to Change Port in Flask app
Last Updated : 16 Nov, 2022
In this article, we will learn to change the port of a Flask application.

The default port for the Flask application is 5000. So we can access our application at the below URL.

http://127.0.0.1:5000/

We may want to change the port may be because the default port is already occupied. To do that we just need to provide the port while running the Flask application. We can use the below command to run the Flask application with a given port.

if __name__ == ‘__main__’:
   app.run(debug=True, port=port_number)

In this example, we will be using a sample flask application that returns a text when we hit the root URL.

helloworld.py

# import flask module
from flask import Flask
 
# instance of flask application
app = Flask(__name__)
 
# home route that returns below text 
# when root url is accessed
@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"
 
if __name__ == '__main__':
    app.run(debug=True, port=8001)
Output:

We are running the flask application on port 8001.

How to Change Port in Flask app

Changing Host IP Address in Flask
Last Updated : 05 Feb, 2023
In this article, we will cover how we can change the host IP address in Flask using Python. The host IP address is the network address that identifies a device on a network. In the context of a Flask application, the host IP address is the address that the application listens to for incoming requests. By default, Flask applications listen on the localhost address 127.0.0.1:5000, which means they can only be accessed from the same machine that the application is running on.

However, it is often useful to be able to access the application from other devices on the same network, or even from the internet. In these cases, the host IP address can be changed to allow the application to be accessed from other devices. This is done by specifying the host IP address in the app.run() function of the Flask application.

Changing the IP address in a Flask application using the “host” parameter
Here are the steps for changing the host IP address in a Flask application using the “host” parameter in the app.run() function. Open the Flask application in a text editor. Locate app.run() function in the main script file. Add the “host” parameter to the app.run() function, followed by the desired IP address, such as: app.run(host=’192.168.0.105′) this is the local address of your system. This will only allow the application to be accessed from the specified IP address.

from flask import Flask 
  
app = Flask(__name__) 
  
@app.route('/') 
def hello(): 
    return 'Hello, World! this application runing on 192.168.0.105'
  
if __name__ == '__main__': 
    app.run(host='192.168.0.105') 
Output: 

Changing Host IP Address in Flask
 

Changing Host IP Address in Flask
 

Changing IP from the command line while deploying the Flask app
Here, the app.run() function does not specify an IP address or a port, so it will use the defaults of localhost (127.0.0.1) and port 5000. You can run this application by setting the FLASK_APP environment variable to the name of your application file and then using the flask run command and then you can change the IP address and port number while running the command

set FLASK_APP=app.py
flask run
flask run --host=192.168.0.105 --port=5000
from flask import Flask 
  
app = Flask(__name__) 
  
@app.route('/') 
def hello(): 
    return 'Hello, World!'
  
if __name__ == '__main__': 
    app.run() 
Output:

This will run the server on IP address 192.168.0.105 and port 5000.


serve static files and templates in flask 

Flask Rendering Templates
Last Updated : 21 Jun, 2023
Flask is a backend web framework based on the Python programming language. It basically allows the creation of web applications in a Pythonic syntax and concepts. With Flask, we can use Python libraries and tools in our web applications. Using Flask we can set up a web server to load up some basic HTML templates along with Jinja2 templating syntax. In this article, we will see how we can render the HTML templates in Flask.

Rendering a Template in a Flask Application
Setting up Flask is quite easy. We can use a virtual environment to create an isolated environment for our project and then install the Python packages in that environment. After that, we set up the environment variables for running Flask on the local machine. This tutorial assumes that you have a Python environment configured, if not please follow through for setting up Python and pip on your system. Once you are done, you are ready to develop Flask applications.

Setting up the Virtual Environment
To set up a virtual environment, we can make use of the Python Package Manager “pip” to install the “virtualenv” package.

pip install virtualenv
This will install the package “virtualenv” on your machine. The pip command can be different on the version of your Python installed so please do look at the different syntax of the pip for your version here.

Creating Virtual Environment: 

After the package has been installed we need to create a virtual environment in our project folder. So you can locate an empty folder where you want to create the Flask application or create an empty folder in your desired path. To create the environment we simply use the following command.

virtualenv venv
Here, venv is the name of the environment, after this command has been executed, you will see a folder named “venv” in the current folder. The name “venv” can be anything(“env”) you like but it is standard to reference a virtual environment at a production level. 

Activating Virtual Environment: 

Now after the virtual env has been set up and created, we can activate it by using the commands in CMD\Powershell or Terminal:

Note: You need to be in the same folder as the “venv” folder.

For Windows:

venv\Scripts\activate
For Linux/macOS:

source venv/bin/activate
This should activate the virtualenv with “(venv)” before the command prompt. 


Screenshot of the entire virtualenv setup

As we can see we have successfully created the virtualenv in Windows Operating System, in Linux/macOS the process is quite similar. The (venv) is indicating the current instance of the terminal/CMD is in a virtual environment, anything installed in the current instance of a terminal using pip will be stored in the venv folder without affecting the entire system. 

Installing Flask: 

After the virtual environment has been set up, we can simply install Flask with the following command:

pip install flask
This should install the actual Flask Python package in the virtual environment.

Adding Flask to Environment Variables: We need to create an app for Flask to set it as the starting point of our application. We can achieve this by creating a file called “server.py” You can call this anything you like, but keep it consistent with other Flask projects you create. Inside the server.py paste the following code:

from flask import Flask
 
app = Flask(__name__)
 
if __name__ == "__main__":
    app.run()
This is the code for actually running and creating the Flask app. This is so-called the entry point of a Flask web server. As you can see we are importing the Flask module and instantiating with the current file name in “Flask(__name__)”. Hence after the check, we are running a function called run().

After this, we need to set the file as the Flask app to the environment variable.

For Windows:

set FLASK_APP=server
For Linux/macOS:

export FLASK_APP=server
Now, this will set up the Flask starting point to that file we created, so once we start the server the Flask server will find the way to the file “server.py”

To run the server, enter the command :

flask run
This will run the server and how smartly it detected the server.py file as our actual flask app. If you go to the URL “http://localhost:5000”, you would see nothing than a Not Found message this is because we have not configured our web server to serve anything just yet. You can press CTRL + C to stop the server


Flask set up for webserver

Creating Templates in a Flask Application
Now, we can move on to the goal of this article i.e. to render the template. To do that we need to first create the templates, you can use any HTML template but for simplicity, I am going with a basic HTML template. Before that, create a folder called “templates” in the current folder. Inside this “templates” folder, all of the templates will be residing. Now let us create a basic HTML template:  This template must have some Jinja blocks that can be optionally replaced later. We start with a single block called the body.

templates\index.html

<!DOCTYPE html>
<html>
 
<head>
    <title>FlaskTest</title>
</head>
 
<body>
    <h2>Welcome To GFG</h2>
    <h4>Flask: Rendering Templates</h4>
 <!-- this section can be replaced by a child document -->  
{% block body %}
 
 
<p>This is a Flask application.</p>
 
 
{% endblock %}
 
 
</body>
 
</html>
Adding Routes and Rendering Templates
A route is a mapping of a URL with a function or any other piece of code to be rendered on the webserver. In the Flask, we use the function decorate @app.route to indicate that the function is bound with the URL provided in the parameter of the route function.

Creating the basic route: In this case, we are binding the URL “/” which is the base URL for the server with the function “index”, you can call it whatever you like but it makes more sense to call it index here. The function simply returns something here it calls the function render_template. The render_template finds the app by default in the templates folder. So, we just need to provide the name of the template instead of the entire path to the template. The index function renders a template index.html and hence we see the result in the browser.

Now, we need a way to actually link the template with a specific route or URL. This means whenever the user goes to a specific URL then a specific template should be rendered or generated. Now, we need to change the “server.py” with the following:

from flask import Flask, render_template
 
app = Flask(__name__)
 
 
@app.route("/")
def index():
    return render_template("index.html")
 
  if __name__ == "__main__":
    app.run()
Output:

We have imported the render_template function from the Flask module and added a route.


render the basic template

Templating With Jinja2 in Flask
Now, we’ll create a new route for demonstrating the usage of the Jinja template. We need to add the route, so just add one more chunk of the code to the “server.py file”

@app.route("/<name>")
def welcome(name):
    return render_template("welcome.html", name=name)
Now, this might look pretty easy to understand, we are simply creating a route “/<name>” which will be bound to the welcome function. The “<name>” is standing for anything after the “/”. So we take that as the parameter to our function and pass it to the render_template function as name. So, after passing the variable name in the render_template function, it would be accessible in the template for us to render that variable. You can even perform an operation on the variable and then parse it.

No, we need to create another template called “welcome.html” inside the template folder. This file should contain the following markup

<!DOCTYPE html>
<html>
 
<head>
    <title>FlaskTest</title>
</head>
 
<body>
    <h2>Welcome To GFG</h2>
    <h3>Welcome, {{name}}</h3>
</body>
 
</html>

Using Jinja template

Flask – Jinja Template Inheritance Example
Now, we need a way to actually inherit some templates instead of reusing them, we can do that by creating the blocks in Jinja. They allow us to create a template block and we can use them in other templates with the name given to the block. 

So, let us re-use our “index.html” and create a block in there. T do that we use “{% block <name> %} (where name = ‘body’) to start the block, this will take everything above it and store it in a virtual block of template, to end the block you simply use “{% endblock %}” this will copy everything below it. 

templates/index.html 


<!DOCTYPE html>
<html>
<head>
<title>FlaskTest</title>
</head>
<body>
<h2>Welcome To GFG</h2>
<h4>Flask: Rendering Templates</h4>
<a href="{{ url_for('home') }}">Home</a>
<a href="{{ url_for('index') }}">Index</a>
{% block body %}
 
 
<p>This is a Flask application.</p>
 
 
{% endblock %}
</body>
</html>
So, here we are not including the <p> tags as everything below the {% endblock %} and everything above the {% block body %} tag is copied. We are also using absolute URLs. The URLs are dynamic and quite easy to understand. We enclose them in “{{ }}” as part of the Jinja2 syntax. The url_for function reverses the entire URL for us, we just have to pass the name of the function as a string as a parameter to the function.

Now, we’ll create another template to reuse this created block “body”, let’s create the template “home.html” with the following contents:

templates/home.html


{% extends 'index.html' %}
 
{% block body %}
 
<p> This is a home page</p>
 
{% endblock %}
This looks like a two-liner but will also extend (not include) the index.html. This is by using the {% extends <file.html> %} tags, they parse the block into the mentioned template. After this, we can add the things we want. If you use the include tag it will not put the replacement paragraph in the correct place on the index.html page. It will create an invalid HTML file, but since the browser is very forgiving you will not notice unless you look at the source generated. The body text must be properly nested.

Finally, the piece left here is the route to home.html, so let’s create that as well. Let’s add another route to the “server.py file”


@app.route("/home")
def home():
    return render_template("home.html")
So, this is a route bound to the “/home” URL with the home function that renders the template “home.html” that we created just right now.


Demonstrating block and URLs

As we can see the URL generated is dynamic, otherwise, we would have to hardcode both the template page paths. And also the block is working and inheriting the template as provided in the base templates. Open the page source in the browser to check it is properly formed HTML.

<!DOCTYPE html>
<html>
<head>
<title>FlaskTest</title>
</head>
<body>
   <h2>Welcome To GFG</h2>
   <h4>Flask: Rendering Templates</h4>
   <a href="/home">Home</a>
   <a href="/">Index</a>
   <a href="/about">About</a>
   <a href="/documentation">Documentation</a>
   
<p> This is a home page</p>
<p>must use extends not include</p>
</body>
</html>
Inducing Logic in Templates: We can use for loops if conditions in templates. this is such a great feature to leverage on. We can create some great dynamic templates without much of a hassle. Let us create a list in Python and try to render that on an HTML template. 

Using for loops in templates: For that, we will create another route, this time at “/about”, this route will bind to the function about that renders the template “about.html” but we will add some more things before returning from the function. We will create a list of some dummy strings and then parse them to the render_template function.

@app.route("/about")
def about():
    sites = ['twitter', 'facebook', 'instagram', 'whatsapp']
    return render_template("about.html", sites=sites)
So, we have created the route at “/about” bound to the about function. Inside that function, we are first creating the list “Sites” with some dummy strings and finally while returning, we parse them to the render_template function as sites, you can call anything you like but remember to use that name in the templates. Now, to create the templates, we’ll create the template “about.html” with the following contents:

templates/about.html

{% extends 'index.html' %}
{% block body %}
<ul>
    {% for social in sites %}
    <li>{{ social }}</li>
    {% endfor %}
</ul>
{% endblock %}
We can use for loops in templates enclosed in “{% %}” we can call them in a regular Pythonic way. The sites are the variable(list) that we parsed in the route function. We can again use the iterator as a variable enclosed in “{{ }}”. This is like joining the puzzle pieces, the values of variables are accessed with “{{ }}”, and any other structures or blocks are enclosed in “{% %}. 

Now to make it more accessible you can add its URL to the index.html like so:

<!DOCTYPE html>
<html>
 
<head>
    <title>FlaskTest</title>
</head>
 
<body>
    <h2>Welcome To GFG</h2>
    <h4>Flask: Rendering Templates</h4>
    <a href="{{ url_for('home') }}">Home</a>
    <a href="{{ url_for('index') }}">Index</a>
    <a href="{{ url_for('about') }}">About</a>
    {% block body %}
     
     
<p>This is a Flask application.</p>
 
 
    {% endblock %}
</body>
 
</html>
 
This is not mandatory but it creates an accessible link for ease.  


Demonstrating for loop-in templates

As we can see it has dynamically created all the lists in the template. This can be used for fetching the data from the database if the app is production ready. Also, it can be used to create certain repetitive tasks or data which is very hard to do them manually. 


Corrected extends file

This correctly defined extends file removed the placeholder paragraph and replaces it in the body of the HTML.

If statement in HTML Template in Python Flask
We can even use if-else conditions in flask templates. Similar to the syntax for the for loops we can leverage that to create dynamic templates. Let’s see an example of a role for a website.

Let’s build the route for the section contact. This URL is “contact/<role>”, which is bound to the function contact which renders a template called “contacts.html”. this takes in the argument as role. Now we can see some changes here, this is just semantic changes nothing new, we can use the variable person as a different name in the template which was assigned as the values of the role.

@app.route("/contact/<role>")
def contact(role):
    return render_template("contact.html", person=role)
So, this creates the route as desired and parses the variable role as a person to the template. Now let us create the template.

template/contact.html

{% extends 'index.html' %}
 
{% block body %}
  {% if person == "admin" %}
 
   
<p> Admin Section </p>
 
 
  {% elif person == "maintainer" %}
 
       
<p> App Source Page for Maintainer</p>
 
 
  {% elif person == "member" %}
 
       
<p> Hope you are enjoying our services</p>
 
 
  {% else %}
 
       
<p> Hello, {{ person }}</p>
 
 
  {% endif %}
{% endblock %}
So, in the template, we are checking the value of the variable person which is obtained from the URL and parsed from the render_template function. The if-else syntax is similar to Python with just “{% %}” enclosed. The code is quite self-explanatory as we create if-elif and else ladder, checking for a value and creating the HTML elements as per the requirement. 


 

So, we can see that the template is rendering the contents as per the role variable passed in the URL. Don’t try to create a URL link for this as it would not work since we need to enter the role variable manually. There needs to be some workaround done to use it.

So that was about using and rendering the templates in Flask. We have leveraged the Jinja templating syntax with Python to create some dynamic templates. 


CSRF Protection in Flask
Last Updated : 05 Feb, 2023
Let’s see how you can manually protect your data using CSRF protection by doing a mini-project in Flask. In this, we will have to create a webpage containing 2 forms using Python one of them is having protection. By creating forms like these we can easily see the results and advantages of using CSRF protection for our application.

What is CSRF?
Cross-Site Request Forgery(CSRF) is a weighty exposure that results from weak gathering administration. If that requests shipped by an application aren’t rare, it’s likely for an aggressor to art a certain request and transmits that to a consumer. If the consumer communicates accompanying the workout request, and gatherings aren’t controlled correctly, an aggressor grant permission within financial means to acquire the gathering similarity of that consumer and complete activity requests on their side.

Solution for Preventing CSRF Attacks
Cross-Site Request Forgery (CSRF) attacks are comparably smooth to diminish. One of the plainest habits to manage this is through the use of CSRF tokens, which are uncommon principles dynamically created by a server-side request and shipped to the customer. Since these principles are rare for each request, and uniformly changeful, it is almost hopeless for a raider to pre-generate the URLs/requests for an attack.

### recreate image


 

Example of CSRF Protection in Flask
Step 1: Create a Virtual environment for our application and install the following packages.

Step 2: Installing Packages.

 pip install flask, flask-wtf
Step 3: You should have to create a folder structure like this. 


 

Step 4: app.py

In Flask, we are having generally 2 ways to create a form one by using FlaskForm and another by creating forms manually. FlaskForm processes the request that already getting CSRF Protection. Csrf requires a secret key by default, it uses the Flask app’s Secret Key. If you like to set up a separate token then you can use WTF_CSRF_SECRET_KEY instead of using a flask app’s secret key. While using FlaskForm, you will have to render the forms CSRF field.n You can disable the CSRF Protection in all views by default, then set WTF_CSRF_CHECK_DEFAULT to False in the app.py file.

from flask import Flask, render_template, request 
from flask_wtf import CSRFProtect 
  
app = Flask(__name__) 
app.secret_key = b'_53oi3uriq9pifpff;apl'
csrf = CSRFProtect(app) 
  
  
@app.route("/protected_form", methods=['GET', 'POST']) 
def protected_form(): 
    if request.method == 'POST': 
        name = request.form['Name'] 
        return (' Hello ' + name + '!!!') 
    return render_template('index.html') 
  
@app.route("/unprotected_form", methods=['GET', 'POST']) 
def unprotected_form(): 
    if request.method == 'POST': 
        name = request.form['Name'] 
        return (' Hello ' + name + '!!!') 
    return render_template('index.html') 
  
if __name__ == '__main__': 
    app.run(debug=True)
Step 5: templates/index.html 

A simple HTML page is set up for the app to show the unprotected and protected submission of the form. 

<html> 
<head></head> 
<body> 
<form action="{{ url_for('protected_form') }}" method="POST"> 
    <label for="Name">Your Name Please ? </label> 
    <input type="text" name="Name"> 
    <input type="hidden" name="csrf_token" value = "{{ csrf_token() }}" />  
    <button type="submit">Submit</button> 
</form> 
  
  
<form action="{{ url_for('unprotected_form') }}" method="POST"> 
    <label for="Name">Your Name Please ? </label> 
    <input type="text" name="Name"> 
    <button type="submit">Submit</button> 
</form> 
  
</body> 
</html>
Step 5: Now run it to see the webpage and perform the practice.

python app.py
Output:

Visit ‘127.0.0.1:5000/protected_form‘ and try submitting both forms and one by one you should get the following outputs. While submitting the first form we applied the token inside the form so that it checks the token if it presents it serves the request else it generates an error.


Template Inheritance in Flask
Last Updated : 05 Sep, 2020
Template inheritance is a very good feature of Jinja templating . Jinja is a web template engine for the Python programming language . We have seen that webpages of a website contains same footer , navigation bar etc.  So instead of making same footer and navigation bar in all webpages separately , we make use of template inheritance , which allows us to create the part which is same in all webpages (eg. footer,navigation bar) only once and we also don’t need to write the html , head , title tag again and again . Lets define the common structure of web pages in base.html file. First of all we will render  template using flask from main.py file .

Prerequisite –  Flask – (Creating first simple application)

 

Step 1 – Create a flask app to render the main template 

from flask import Flask, render_template 
  
# Setting up the application 
app = Flask(__name__) 
  
# making route 
  
  
@app.route('/') 
def home(): 
    return render_template('home.html') 
  
  
# running application 
if __name__ == '__main__': 
    app.run(debug=True) 
Step 2 – Create HTML Files

Now we will set up our base.html file in which we have one heading which will be common in all webpages. 

Syntax : 

{% block content %}
{% endblock %}
The code above and below these lines will be the same for every web pages and the code between them will be for a specific web page . 

<!DOCTYPE html> 
<html lang="en"> 
<head> 
    <title>Template Inheritance</title> 
</head> 
<body> 
    <h1> This heading is common in all webpages </h1> 
    {% block content %} 
    {% endblock %} 
  
</body> 
</html>
  

Now we will set up our home.html file in which we will inherit template from “base.html” file and will write some code for 

home page also . 

Syntax :

  {% extends "base.html" %}
        {% block content %}
          write code here for home page only 
        {% endblock %}
{%extends "base.html" %} 
{%block content%} 
  
<h1>Welcome to Home</h1> 
  
{% endblock %}
      

Run your main.py file . 

Output – 

Below is the output.



        

This article is just a simple example. We can also add navigation bar , footer , etc to base.html file and can inherit to home.html file and many others .

Placeholders in jinja2 Template – Python
Last Updated : 05 Feb, 2023
Web pages use HTML for the things that users see or interact with. But how do we show things from an external source or a controlling programming language like Python? To achieve this templating engine like Jinja2 is used. Jinja2 is a templating engine in which placeholders in the template allow writing code similar to Python syntax which after passing data renders the final document. In this article we will cover some of the points as mentioned below:

Template Variables
Template if Statements
Template for Loops
Template Inheritance
Let’s start by creating a virtual environment. It’s always a good idea to work in a virtual environment as it will not cause changes to the global system environment. For using Jinja2 in Python, we need to install the Jinja2 library.

pip install Jinja2
Template Variables in Jinja2
Jinja2 is a Python library that allows us to build expressive and extensible templates. It has special placeholders to serve dynamic data. A Jinja template file is a text file that does not have a particular extension.

Syntax of Template Variables in Jinja2
For a placeholder, we have the following syntax in Jinja2.

{{variable_name}}
Example 
In an HTML file called index_template.html, write the following code.

<!-- index_template.html -->
  
Hello {{pl_name}}! Your email is: {{pl_email}}
app.py

We open this HTML file in Python and read its content to a variable called content. Pass the content to Template, and store it in the template variable. Now, we will pass the name and email to render and replace the placeholders {{pl_name}} and {{pl_email}} respectively, by using template.render; and store this in rendered_form.

# app.py 
  
# import Template from jinja2 for passing the content 
from jinja2 import Template 
  
# variables that contain placeholder data 
name = 'John'
email = 'you@example.co'
  
  
# Create one external form_template html page and read it 
File = open('index_template.html', 'r') 
content = File.read() 
File.close() 
  
# Render the template and pass the variables 
template = Template(content) 
rendered_form = template.render(pl_name=name, pl_email=email) 
  
  
# save the txt file in the form.html 
output = open('index.html', 'w') 
output.write(rendered_form) 
output.close() 
The index.html file is created in the variable output. Write the content to this HTML file using output.write(rendered_form). Below are the two files before running the Python program.


 

Now, run app.py using the following command:

python app.py
A new file is created named index.html. Open it and see the code. The placeholder text is changed to the values that we passed.


 


 

Conditionals and Looping in Jinja2
Jinja in-line conditionals are started with a curly brace and a % symbol, like {% if condition %} and closed with {% endif %}. You can optionally include both {% elif %} and {% else %} tags, and for loop, we use {% for index in numbers %} and end with {% endfor %}.

Syntax of Conditionals and Looping
For conditions, we have the following syntax in Jinja2.

For loop

If condition

{% for i in numbers %}

{% endfor %}

{% if i % 2== 0 %}
{% endif %}
Example

A list can also be passed using Jinja. To iterate through the list and for using conditions, similar to Python we use loop and if-condition. Let’s pass a list of numbers as well:

# app.py 
  
# import Template from jinja2 for passing the content 
from jinja2 import Template 
  
# variables that contain placeholder data 
name = 'John'
email = 'you@example.co'
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] 
  
# Create one external form_template html page and read it 
File = open('index_template.html', 'r') 
content = File.read() 
File.close() 
  
# Render the template and pass the variables 
template = Template(content) 
rendered_form = template.render(pl_name=name, 
                                pl_email=email, numbers=numbers) 
  
  
# save the txt file in the form.html 
output = open('index.html', 'w') 
output.write(rendered_form) 
output.close() 
index_template.html

Here we will iterate the number and print the even number from the list.

<!-- index_template.html -->
  
Hello {{pl_name}}! Your email is: {{pl_email}} 
<br> 
Even numbers: 
{% for i in numbers %} 
    {% if i%2==0 %} 
        {{i}} 
    {% endif %} 
{% endfor %} 
Output:


 

Template Inheritance in Jinja2
Template inheritance is a very good feature of Jinja templating. All that is needed is to add a {% extend %} tag. The home page {% extends “base. html” %} inherits everything from the base template.

Syntax of Jinja extend block
For Inherit the base page, we have the following syntax in Jinja2.

{% block content %}
<Code>
{% endblock %} 
{% extends "base.html" %}
{% block content %}
   <Code>
{% endblock %}
Example

Here, we want to use the same HTML content across pages like a Website name or a search bar without repeating the HTML code. For this Jinja2 has a feature called template inheritance. Suppose we need this heading and search bar on every page without repeating the code:


 

base.html: This is the code of the website name and search bar.

<!-- base.html -->
  
<h1>My Blog</h1> 
<input type="search"> 
<button>Search</button> 
  
<!-- Child page code goes between this -->
{% block content %}{% endblock %} 
  
<!-- You can continue base.html code after this if you want -->
<br><br>
Let’s include this in our index_template.html. In the child template or the page, you want to include the website name and search bar.

<!-- index_template.html -->
  
<!-- include base.html -->
{% extends "base.html" %} 
  
<!-- Write any code only in this block -->
{% block content %} 
  
Hello {{pl_name}}! Your email is: {{pl_email}} 
<br> 
Even numbers: 
{% for i in numbers %} 
    {% if i%2==0 %} 
        {{i}} 
    {% endif %} 
{% endfor %} 
      
<!-- end the block -->
{% endblock %}
Output:


 

How to serve static files in Flask
Last Updated : 23 Jan, 2023
Flask is a lightweight Web Server Gateway Interface or WSGI framework for web applications written in Python. It is designed to make web application development fast and easy and can scale to complex applications. This article describes and demonstrates how to serve various static files in Flask. 

Serving Static Files in Flask
Let’s configure the virtual environment first. Although this step is optional, we always recommend using a dedicated development environment for each project. This can be achieved in a Python virtual environment.

Now that we have created our Flask app, let’s see how to serve static files using the Flask app we just created. First, static files are files served by a web server and do not change over time like CSS and Javascript files used in web applications to improve user experience. Below you will find a demonstration of various static files served by the Flask app.

File Structure 

How to serve static files in Flask
 

HTML File
Serving HTML files using Flask is fairly simple just create a templates folder in the project root directory and create the HTML files, as templates/index.html. Here, we are passing text, and with the help of Jinja {{message}}, we are printing text that is present in the variable.

<html> 
 <head> 
   <title>Flask Static Demo</title> 
 </head> 
 <body> 
   <h1>{{message}}</h1> 
 </body> 
</html> 
main.py

In main.py we render the HTML file when we run it, we are using the render_template() function provided by Flask to render the HTML file. The final code looks like this:

from flask import Flask 
from flask import render_template 
  
# creates a Flask application 
app = Flask(__name__) 
  
  
@app.route("/") 
def hello(): 
    message = "Hello, World"
    return render_template('index.html',  
                           message=message) 
  
# run the application 
if __name__ == "__main__": 
    app.run(debug=True)
Output:

The Flask is up and running on localhost port http://127.0.0.1:5000/

How to serve static files in Flask
 

Serve CSS file in Flask
Now serving a CSS file is the same as an HTML file but instead of /templates folder, we create a static folder in the root directory and add all CSS files to it, For simplicity, we have used a very simple CSS file.

h1{ 
    color: red; 
    font-size: 36px; 
}
Now, let us link it with the HTML template file using the link tag referring to the CSS file in the static folder.

<html> 
  <head> 
    <title>Flask Static Demo</title> 
    <link rel="stylesheet" href="/static/style.css" /> 
  </head> 
  <body> 
    <h1>{{message}}</h1> 
  </body> 
</html> 
Output:

How to serve static files in Flask
 

Serve JavaScript file in Flask
To serve Javascript it is the same as a CSS file create a javascript file in the static folder.

document.write("This is a Javascript static file") 
Now link it with the HTML and run the Flask app.

<html> 
  <head> 
    <title>Flask Static Demo</title> 
    <link rel="stylesheet" href="/static/style.css" /> 
  </head> 
  <body> 
    <h1>{{message}}</h1> 
  
    <script src="/static/serve.js" charset="utf-8"></script> 
  </body> 
</html> 
Output:

How to serve static files in Flask
 

Serve Media files in Flask (Image, Video, Audio)
You can also use Flask to serve media files such as images, videos, audio files, text files, and PDFs. You can use the same /static folder that you used for CSS and Javascript to serve these kinds of files.

Place all media files in a static folder and associate them with their respective HTML files as shown below. Once all template files have been processed, create routes in main.py for all static files you want to render.

Images
Create an image.html file in the templates folder and add the following code to the main.py and image.html respectively.

# Images 
@app.route("/image") 
def serve_image(): 
    message = "Image Route"
    return render_template('image.html', message=message)
templates/images.html

<html> 
  <head> 
    <title>Flask Static Demo</title> 
    <link rel="stylesheet" href="/static/style.css" /> 
  </head> 
  <body> 
    <h1>{{message}}</h1> 
  
    <img src="/static/cat.jpg" alt="Cat image" width="20%" height="auto" /> 
  
    <script src="/static/serve.js" charset="utf-8"></script> 
  </body> 
</html> 
Output:

How to serve static files in Flask
 

Video Files
To serve a video file, create a video.html file in your templates folder and add the following code to your main.py and video.html files.

# video 
@app.route("/video") 
def serve_video(): 
    message = "Video Route"
    return render_template('video.html', message=message)
templates/video.html

As you see the mp4 video file is been served by Flask over localhost.

<html> 
  <head> 
    <title>Flask Static Demo</title> 
    <link rel="stylesheet" href="/static/style.css" /> 
  </head> 
  <body> 
    <h1>{{message}}</h1> 
  
    <video width="320" height="240" controls> 
      <source src="/static/ocean_video.mp4" type="video/mp4" /> 
    </video> 
  
    <script src="/static/serve.js" charset="utf-8"></script> 
  </body> 
</html> 
Output:

How to serve static files in Flask\
 

Audio Files
Respectively an audio file can be served by creating an audio.html template file and adding the following code to the main.py.

# audio 
@app.route("/audio") 
def serve_audio(): 
    message = "Audio Route"
    return render_template('audio.html', message=message)
templates/audio.html

<html> 
  <head> 
    <title>Flask Static Demo</title> 
    <link rel="stylesheet" href="/static/style.css" /> 
  </head> 
  <body> 
    <h1>{{message}}</h1> 
  
    <audio controls> 
      <source src="/static/audio.mp3" /> 
    </audio> 
  
    <script src="/static/serve.js" charset="utf-8"></script> 
  </body> 
</html> 
Output:

How to serve static files in Flask
 

Complete Flask Code
For simplicity, we have created a simple Flask application for a better understanding of how to serve static files in Flask.

from flask import Flask 
from flask import render_template 
  
# creates a Flask application 
app = Flask(__name__) 
  
  
@app.route("/") 
def hello(): 
    message = "Hello, World"
    return render_template('index.html', message=message) 
  
  
@app.route("/video") 
def serve_video(): 
    message = "Video Route"
    return render_template('video.html', message=message) 
  
  
@app.route("/audio") 
def serve_audio(): 
    message = "Audio Route"
    return render_template('audio.html', message=message) 
  
  
@app.route("/image") 
def serve_image(): 
    message = "Image Route"
    return render_template('image.html', message=message) 
  
  
# run the application 
if __name__ == "__main__": 
    app.run(debug=True) 
Let’s test the Flask app by running it, to run the app just run the python main.py which will serve output as shown above:

How to serve static files in Flask
 


Get 90% Course fee refund in just 90 Days! Also get 1:1 Mock Interview, Job assistance and more additional benefits on selected courses. Take up the Three 90 challenge today!
Don't miss your chance to ride the wave of the data revolution! Every industry is scaling new heights by tapping into the power of data. Sharpen your skills and become a part of the hottest trend in the 21st century.

Dive into the future of technology - explore the Complete Machine Learning and Data Science Program by GeeksforGeeks and stay ahead of the curve.

Uploading and Downloading Files in Flask
Last Updated : 27 Feb, 2023
This article will go over how to upload and download files using a Flask database using Python. Basically, we have a section for uploading files where we can upload files that will automatically save in our database. When we upload a file and submit it, a message stating that your file has been uploaded and displaying the file name on the screen appears. When we view our Flask SQLite database, we can see that our file has been automatically saved in the database. We can also download our files by using the /download /id number using the link. Consequently, we shall comprehend each phase of this method in this post.

Uploading and Downloading Files in Flask
For our upload and return files with the database in a Flask, first, we create a templates folder for making choose file and submit button in HTML file form so let’s get started. To upload and download files with the database in Flask, first we need to download SQLite DB browser to save our data in SQLite.

File structure

Uploading and Downloading Files in Flask
 

Templates File
In the templates file, we will create only one HTML file which will operate our all frontend part code.

index.html
In the index.html file, we make the first heading using h1 for showing exactly what we are doing and after that, we write one form in which we declare the method POST action by using URL ‘/’ and after that, we initialize data type by using Enctype and we take the multipart/form-data in this so our all file will safely save in database and after that, we write code for simple input button and also submit button for showing all these functionalities clearly we are using some CSS in style tag for making our frontend part beautiful

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Upload Example</title>
    <style>
      .ok{
           
           font-size: 20px;
      }
      .op{
        font-size: 20px;
        margin-left: -70px;
        font-weight: bold;
        background-color: yellow;
        border-radius: 5px;
        cursor: pointer;
      }
        
     
    </style>
</head>
<body>
    <div class="center">
        <h1> Uploading and Returning Files With a Database in Flask  </h1>
        <form method="POST" action="/" enctype="multipart/form-data">
            <input class="ok" type="file" name="file">
            <button class="op">Submit</button>
        </form>
    </div>
     
</body>
</html>
Output:

Uploading and Downloading Files in Flask
Html Output

app.py
After writing code for templates we create an app.py file outside of the templates folder and create app,.py in which we will write our main code of uploading and returning files with a database in a Flask in Python language.

Step 1: Import all libraries 

In the app.py file we will write our main part of the code through these all operations will operate easily first in app.py we need to import all important libraries which are important for doing upload and returning files with database operations first we import io BytesIO this module will convert our all pdf files binary in below you can see what type of output will show in the database when we upload any pdf in the database and we  import render_template for rendering templates and after that, we are importing send_file module which will help us to send the file to database and after that, we are importing flask_sqlalchemy for our SQL data 

from io import BytesIO
from flask import Flask, render_template, request, send_file
from flask_sqlalchemy import SQLAlchemy
Step 2:  Create a database 

After importing all libraries we create an SQL database for uploading and returning our file we initialize the Flask function and after that, we make a database sqlite:///db.sqlite3 to save our uploading files and we create one DB as SQLAchemy saving database

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
Step 3: Create a table for the database

after creating the database we need to make a table database for which we create one ID which we make the primary key after making the id we crate the filename and in the filename we initialize a varchar limit of 50 and after that, we create one data which is a blob which means we can see our file by click on the blob and for making all these functionalities we write following lines of code in our app.py file 

class Upload(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(50))
    data = db.Column(db.LargeBinary)
Step 4: Create an index function

We create one index function in which we set the first path ‘/’ and after that, we pass the request for method functionality in method functionality we create one var upload in which we initialize the filename and read the file if we upload a pdf so it will read it in binary form after writing this we create DB session in our database and also we commit our DB session after creating and after that we return file name with flashing massage uploaded ‘ filename’ and we return our render template on index,.html file 

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        file = request.files['file']
        upload = Upload(filename=file.filename, data=file.read())
        db.session.add(upload)
        db.session.commit()
        return f'Uploaded: {file.filename}'
    return render_template('index.html')
After writing the code we need to create db.sqlite in our system to create a database we need to run the following command in the terminal:

python
from app import app, db
app.app_context().push()
db.create_all()
exit()
Uploading and Downloading Files in Flask
 

by running the above command in the terminal we can create a database in which our file will save after uploading and submitting the database and we can see our database in the instance folder automatically created for running how to run these commands watch a video which is attached below.

Step 5: Create a download function for downloading the file.

After uploading our file we need to make a download function for download our uploading file  for download file we make one upload variable in which we add an upload query and we filter our files by id as we set every id unique so every file has a unique id and after that, we return our file by using send_file and also for download pdf file we convert it into binary to our data file by using BytesIO module and after we can download our file by using the following link 

http://127.0.0.1:5000/download/id_number 

@app.route('/download/<upload_id>')
def download(upload_id):
    upload = Upload.query.filter_by(id=upload_id).first()
    return send_file(BytesIO(upload.data), download_name=upload.filename, as_attachment=True )
Complete Code

# import all libraires
from io import BytesIO
from flask import Flask, render_template, request, send_file
from flask_sqlalchemy import SQLAlchemy
 
# Initialize flask  and create sqlite database
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
 
# create datatable
class Upload(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(50))
    data = db.Column(db.LargeBinary)
 
# Create index function for upload and return files
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        file = request.files['file']
        upload = Upload(filename=file.filename, data=file.read())
        db.session.add(upload)
        db.session.commit()
        return f'Uploaded: {file.filename}'
    return render_template('index.html')
 
# create download function for download files
@app.route('/download/<upload_id>')
def download(upload_id):
    upload = Upload.query.filter_by(id=upload_id).first()
    return send_file(BytesIO(upload.data), 
                     download_name=upload.filename, as_attachment=True)
To run the above code we need to run the following command in the terminal:

flask run
Output:

After running these commands in the terminal when we upload files like pdf and images so following output will show in the database when we blob SQLite database.

Image upload

When we upload images so following image type interface will display on the screen when we blob our database.

Uploading and Downloading Files in Flask
Database for image 

Pdf upload

When we upload any pdf file so database converts our pdf file into the binary form so the following type of interface will show when we upload any pdf file in the database and the blob.

Uploading and Downloading Files in Flask
Database of pdf file in binary form 

Output Video:


How to Upload File in Python-Flask
Last Updated : 07 Nov, 2022
File uploading is a typical task in web apps. Taking care of file upload in Flask is simple all we need is to have an HTML form with the encryption set to multipart/form information to publish the file into the URL. The server-side flask script brings the file from the request object utilizing the request.files[] Object. On effectively uploading the file, it is saved to the ideal location on the server.

Install the Flask by writing the command in terminal:

pip install flask
Stepwise Implementation
Step 1: A new folder “file uploading” should be created. Create the folders “templates” and “main.py” in that folder, which will store our HTML files and serve as the location for our Python code.

Step 2: For the front end, we must first develop an HTML file where the user can select a file and upload it by clicking the upload buttons. The user will click the submit button after choosing the file from their local computer in order to transmit it to the server.

Index.html

<html>   
<head>   
    <title>upload the file : GFG</title>   
</head>   
<body>   
    <form action = "/success" method = "post" enctype="multipart/form-data">   
        <input type="file" name="file" />   
        <input type = "submit" value="Upload">   
    </form>   
</body>   
</html>
Step 3: We must make another HTML file just for acknowledgment. Create a file inside the templates folder called “Acknowledgement.html” to do this. This will only be triggered if the file upload went smoothly. Here, the user will receive a confirmation.

Acknowledgement.html

<html> 
   <head> 
      <title>success</title> 
   </head> 
   <body> 
      <p>File uploaded successfully</p> 
      <p>File Name: {{name}}</p> 
   </body> 
</html>
Step 4: Now inside the ‘main.py’ write the following codes. The name of the objective file can be obtained by using the following code and then we will save the uploaded file to the root directory.

main.py

from distutils.log import debug 
from fileinput import filename 
from flask import *  
app = Flask(__name__)   
  
@app.route('/')   
def main():   
    return render_template("index.html")   
  
@app.route('/success', methods = ['POST'])   
def success():   
    if request.method == 'POST':   
        f = request.files['file'] 
        f.save(f.filename)   
        return render_template("Acknowledgement.html", name = f.filename)   
  
if __name__ == '__main__':   
    app.run(debug=True)
Output:

Run the following command in your terminal.

python main.py

 


 

Step 5: Now, to check if it is correctly working or not go to the folder where ‘main.py‘. Check in that folder you will find the files there.

Upload Multiple files with Flask
In online apps, uploading files is a common task. Simple HTML forms with encryption set to multipart/form information are all that is required to publish a file into a URL when using Flask for file upload. The file is obtained from the request object by the server-side flask script using the request. In this article, we will look at how to upload multiple files with Python. It allows the user to select multiple files at once and upload all files to the server. Before proceeding, Install the Flask by writing the command in the terminal:

pip install flask
Stepwise Implementation 
Step 1: Create a new project folder Upload. Inside this folder create main.py, and create folder templates.

Step 2: Create a simple HTML page index.html to select multiple files and submit them to upload files on the server. Here, the HTML file contains a form to select and upload files using the POST method. The enctype attribute plays an important role here. It specifies how the form data should be encoded when submitting it to the server. we are uploading files that’s why we should set the attribute value to multipart/form-data.


<html> 
<head> 
    <title>Upload Multiple files : GFG</title> 
</head> 
<body> 
    <form action = "/upload" method="POST" enctype="multipart/form-data"> 
        <input type="file" name="file" multiple /> 
        <input type = "submit" value="Upload"> 
    </form> 
</body> 
</html> 
Step 3: Now inside the main.py. Here the list of the file object is collected and then we will save the uploaded files one by one to the root directory using the loop and file.save() function.

from flask import *
app = Flask(__name__) 
  
  
@app.route('/') 
def main(): 
    return render_template("index.html") 
  
  
@app.route('/upload', methods=['POST']) 
def upload(): 
    if request.method == 'POST': 
  
        # Get the list of files from webpage 
        files = request.files.getlist("file") 
  
        # Iterate for each file in the files List, and Save them 
        for file in files: 
            file.save(file.filename) 
        return "<h1>Files Uploaded Successfully.!</h1>"
  
  
if __name__ == '__main__': 
    app.run(debug=True) 
Output:

Run the following command in Terminal

python main.py

Index Page

Select multiple files from your folder.


Select Multiple Images

After submitting, a Success message will displayed. 


Files Uploaded

Here we can see that four *.png images are uploaded to the root directory of a project.


Flask – Message Flashing
Last Updated : 14 Mar, 2024
In this article, we will discuss Flask – Message Flashing. As we know best Graphical User Interface provides feedback to a user when users interact, as an example, we know that desktop applications use the messages box or JS for an alert purpose. generating like same informative message is easy to display in the Flask web application. The flashing message of the Flask web application makes Flask easier and more useful for users.

What is the Message Flashing
Message Flashing means when we click on any button( any website ) and the website immediately any message that can be an error, alert, or any type of message that’s call message Flashing and when that happens in a flask or we are creating any website which shows an alert, error type message than its call Flask-Message Flashing.

A Flask contains a flash()  function. which passes a request to the next user. which generally is a template we are using flash methods in the above template in which the message parameter is the real message to be flashed, and another one is the optional category parameter category, it will happen “error” or “warning”.

flash(message, category)
To understand flashing messages and know about more flashing messages, we start to write code for flashing messages we take an example of a login system so let’s write code for flashing message. Create a Virtual Environment.

app.py File
Here, we create an app.py file in which we write our main code of Flask.

In app.py first, we import flask then we initialize the flask function and create a secret key which will help us when we forgot our password then we made two functions one home() for index.html which will help us to call and display the home page when we run flask using flask run command and another one for login login.html  we joint both files by using form action and after that, we use if and else condition for flashing message (error or warning) and also for redirect on profile page by filling right password and also right Email ID  and after that in if and else condition we create password GFG we can set any password it up to you and also write error flashing message which will show when we fill the wrong password and click on submit button for login and if we fill right password and email id it will redirect us on profile page were also showing one welcome flashing message which we create using python code in app.py file.

That error message which is showing in the above images when we enter the wrong password is called a flashing message also if we fill right password and email id and click on submit button then it will redirect us to the profile page which will also show a welcome flashing message so this way we can display flashing message in our display screen. for getting the code and take help completing this flashing message click here. It will also help to know how to show flashing messages.

Python3
from flask import *

# Initialize Flask function
app = Flask(__name__)
app.secret_key = "GeeksForGeeks"


# home function for index.html
@app.route("/index")
def home():
    return render_template("index.html")


# row function for profile.html
@app.route("/profile")
def row():
    return render_template("profile.html")


# write if and else condition if we provide write password then he will redirect
# us in profile page otherwise he will redirect us on same page with
# flashing message Invalid Password
@app.route("/login", methods=['GET', 'POST'])
def login():
    error = None
    if request.method == "POST":
        if request.form['pass'] != "GFG":
            error = "Invalid Password"
        else:
            flash("You are successfully login into the Flask Application")
            return redirect(url_for('row'))

    return render_template("login.html", error=error)


# execute command with debug function
if __name__ == '__main__':
    app.run(debug=True)
Templates File
index.html

In this code, we are writing some flashing (error code ) message command and we connect this page to login by using the URL “/login” in the app.py file it means when we click on the URL ”  login “redirects us to the login page. where we can log in. and we can enter our profile by filling right password which we will set in the below code of the app.py file.

HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
</head>
<body>
    
{% with messages = get_flashed_messages()%}
{% if messages%}
    {% for message in messages%}
    <p>{{message}}</p>
    {%endfor%}
    {%endif%}
    {%endwith%}
    <h3>Welcome to the GeeksForGeeks</h3>
    <a href="{{url_for('login')}}">login</a>
      
</body>
</html>
When we run the following command in our terminal. 

flask run 


Output:

This will show on our display screen and it also shows our flask is successfully running.


index.html

login.html

In the login page, we create simple input for the password and email which is required to fill .and also write three lines of python code for showing a flashing message when we enter the wrong password and try to log in and also set both inputs in from tag in which we create one method post and action “/login” which means when we click on previous page login link so it will redirect us on this login form page and we write for one button in which we set the value to submit for submitting our login form after filling Email and password.

HTML
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>

<body>
    {% if error%}
    <p><strong>{{error}}</strong></p>
    {% endif%}

    <form method="post" action="/login">
    <table>
        <tr>
            <td>Email</td>
            <td><input type="email" name="email"></td>
        </tr>
        <tr>
            <td>Password</td>
            <td><input type="password" name="pass"></td>
        </tr>
        <tr>
            <td><input type="submit" value="Submit"></td>
        </tr>
    </table>
</form>
</body>

</html>
Output:


login.html

profile.html

In this code, we made a simple message that will show after successful login. it will also show us the welcome flashing message which we create in the app.py file by using the flask function.

HTML
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile</title>
</head>
<body>
    <div class="container">
        <p><strong>Welcome to your GFG Profile Page</strong></p>
    </div>
</body>

</html>
Final Output of unsuccessful Flashing Message

If we write the wrong Password and press submit button so it will show a flashing message (error or warning) like the below output image Invalid Password is called Flashing Message. and if we fill right password and email it will redirect us to the profile page which will also show one flashing welcome message on our display screen.


profile.html

The output of successful Flashing Message

Create Contact Us using WTForms in Flask
Last Updated : 26 May, 2022
WTForms is a library designed to make the processing of forms easier to manage. It handles the data submitted by the browser very easily. In this article, we will discuss how to create a contact us form using WTForms.

Advantages of WT-FORM:
We don’t have to worry about validators.
Avoidance of Cross-Site Request Forgery (CSRF).
WTForms come as classes, so all the good come’s from an object form.
No need to create any <label> or <input> elements manually using HTML.
Installation
Use the Terminal to install Flask-WTF.

pip install Flask-WTF
Stepwise Implementation
Step 1: Create a class having all elements that you want in your Form in the main.py.

from flask_wtf import FlaskForm 
from wtforms import StringField, validators, PasswordField, SubmitField 
from wtforms.validators import DataRequired, Email 
import email_validator 
  
  
class contactForm(FlaskForm): 
    name = StringField(label='Name', validators=[DataRequired()]) 
    email = StringField(label='Email', validators=[ 
      DataRequired(), Email(granular_message=True)]) 
       message= StringField(label='Message') 
    submit = SubmitField(label="Log In") 
Step 2: Create the object of the form and pass the object as a parameter in the render_template

@app.route("/", methods=["GET", "POST"]) 
def home(): 
    cform = contactForm() 
    return render_template("contact.html", form=cform) 
Step 3: Add CSRF protection. Add a secret key.

app.secret_key = "any-string-you-want-just-keep-it-secret"
Step 4: Add the fields in the contact.html HTML FILE.

{{ form.csrf_token }} is used to provide csrf protection.
<!DOCTYPE HTML> 
  
<html> 
    <head> 
        <title>Contact</title> 
    </head> 
    <body> 
        <div class="container"> 
            <h1>Contact Us</h1> 
            <form method="POST" action="{{ url_for('home') }}"> 
                {{ form.csrf_token }} 
                  
                <p> 
                    {{ form.name.label }}  
                    <br> 
                    {{ form.name }} 
                </p> 
  
  
                  
                <p> 
                    {{ form.email.label }}  
                    <br> 
                    {{ form.email(size=30) }} 
                </p> 
  
  
                  
                <p> 
                    {{ form.message.label }}  
                    <br> 
                    {{ form.message }} 
                </p> 
  
                {{ form.submit }} 
            </form> 
        </div> 
    </body> 
</html>
Step 5: Validating the Form and receiving the data.

@app.route("/", methods=["GET", "POST"]) 
def home(): 
    cform = contactForm() 
    if cform.validate_on_submit(): 
        print(f"Name:{cform.name.data},  
              E-mail:{cform.email.data},  
              message:{cform.message.data}") 
    else: 
        print("Invalid Credentials") 
                
    return render_template("contact.html", form=cform) 
Complete Code:

from flask import Flask, render_template, request, redirect, url_for 
from flask_wtf import FlaskForm 
from wtforms import StringField, validators, PasswordField, SubmitField 
from wtforms.validators import DataRequired, Email 
import email_validator 
  
app = Flask(__name__) 
app.secret_key = "any-string-you-want-just-keep-it-secret"
  
class contactForm(FlaskForm): 
    name = StringField(label='Name', validators=[DataRequired()]) 
    email = StringField( 
      label='Email', validators=[DataRequired(), Email(granular_message=True)]) 
    message = StringField(label='Message') 
    submit = SubmitField(label="Log In") 
  
  
@app.route("/", methods=["GET", "POST"]) 
def home(): 
    cform=contactForm() 
    if cform.validate_on_submit(): 
            print(f"Name:{cform.name.data}, E-mail:{cform.email.data}, 
                  message:{cform.message.data}") 
    return render_template("contact.html",form=cform) 
  
  
if __name__ == '__main__': 
    app.run(debug=True) 
Output:



Name:Rahul Singh, E-mail:rahuls@gmail.com, message:This is Sample gfg Output!!!
Adding Bootstrap
We can also add the bootstrap to the above form to make it look interactive. For this, we will use the Flask-Bootstrap library. To install this module type the below command in the terminal.

pip install Flask-Bootstrap
Step 1: Create base.html

<!DOCTYPE html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8"> 
    <title>{% block title %}{% endblock %}</title> 
</head> 
<body> 
    {% block content %}{% endblock %} 
</body> 
</html>
Step 2: Modify contact.html to

with single line {{ wtf.quick_form(form) }}
{% extends 'bootstrap/base.html' %} 
{% import "bootstrap/wtf.html" as wtf %} 
  
{% block title %} 
Contact Us 
{% endblock %} 
  
{% block content %} 
        <div class="container"> 
            <h1>Contact Us</h1> 
            {{ wtf.quick_form(form) }} 
        </div> 
{% endblock %}l>
Step 3: MODIFY main.py

It is very simple to modify the .py file. We just have to import the module and add the below line into the code

Bootstrap(app)
from flask import Flask, render_template, request, redirect, url_for 
from flask_wtf import FlaskForm 
from wtforms import StringField, validators, PasswordField, SubmitField 
from wtforms.validators import DataRequired, Email 
from flask_bootstrap import Bootstrap 
import email_validator 
app = Flask(__name__) 
Bootstrap(app) 
app.secret_key = "any-string-you-want-just-keep-it-secret"
  
class contactForm(FlaskForm): 
    name = StringField(label='Name', validators=[DataRequired()]) 
    email = StringField(label='Email', validators=[DataRequired(), Email(granular_message=True)]) 
    message = StringField(label='Message') 
    submit = SubmitField(label="Log In") 
  
  
@app.route("/", methods=["GET", "POST"]) 
def home(): 
    cform=contactForm() 
    if cform.validate_on_submit(): 
            print(f"Name:{cform.name.data}, E-mail:{cform.email.data}, message:{cform.message.data}") 
    return render_template("contact.html",form=cform) 
  
  
if __name__ == '__main__': 
    app.run(debug=True) 
Output:


Sending Emails Using API in Flask-Mail
Last Updated : 06 Apr, 2023
Python, being a powerful language don’t need any external library to import and offers a native library to send emails- “SMTP lib”. “smtplib” creates a Simple Mail Transfer Protocol client session object which is used to send emails to any valid email id on the internet. This article revolves around how we can send bulk customised emails to a group of people with the help of Flask.

Installation :

Three packages are required for flask mail to work, Install them using pip,

1) virtualenv:

pip install virtualenv
2) Flask:

pip install Flask
3) Flask-Mail :

pip install Flask-Mail
After installing the packages, we have to use virtualenv (optional)
1) Create a virtualenv
Open cmd
Go to the folder you want to use for your project.
Write the following code:

        
python3 -m venv env (macOS/Linux)
py -m venv env (Windows)
Here env is name of your environment.
2) Activate the environment
On windows :

.\env\Scripts\activate
On macOS/ Linux:

source env/bin/activate
3) Make sure you get the (env) in the beginning displayed in picture below :


Configuring Flask-Mail
Flask-Mail is configured through the standard Flask config API. These are the available options (each is explained later in the documentation):

1) MAIL_SERVER : Name/IP address of the email server.
2) MAIL_PORT : Port number of server used.
3) MAIL_USE_TLS : Enable/disable Transport Security Layer encryption.
4) MAIL_USE_SSL : Enable/disable Secure Sockets Layer encryption
5) MAIL_DEBUG : Debug support. The default is Flask application’s debug status.
6) MAIL_USERNAME : Username of the sender
7) MAIL_PASSWORD : The password of the corresponding Username of the sender.
8) MAIL_ASCII_ATTACHMENTS : If set to true, attached filenames converted to ASCII.
9) MAIL_DEFAULT_SENDER : sets default sender
10) MAIL_SUPPRESS_SEND : Sending suppressed if app.testing set to true
11) MAIL_MAX_EMAILS : Sets maximum mails to be sent

Note : Not all of the configuration is to be set.

Sending Emails using Flask-Mail
Classes in Flask-Mail:
Mail Class : Manages email-messaging requirements
Message Class: encapsulates an email message

Let’s get our hands on the code.

# importing libraries 
from flask import Flask 
from flask_mail import Mail, Message 
   
app = Flask(__name__) 
mail = Mail(app) # instantiate the mail class 
   
# configuration of mail 
app.config['MAIL_SERVER']='smtp.gmail.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USERNAME'] = 'yourId@gmail.com'
app.config['MAIL_PASSWORD'] = '*****'
app.config['MAIL_USE_TLS'] = False
app.config['MAIL_USE_SSL'] = True
mail = Mail(app) 
   
# message object mapped to a particular URL ‘/’ 
@app.route("/") 
def index(): 
   msg = Message( 
                'Hello', 
                sender ='yourId@gmail.com', 
                recipients = ['receiver’sid@gmail.com'] 
               ) 
   msg.body = 'Hello Flask message sent from Flask-Mail'
   mail.send(msg) 
   return 'Sent'
   
if __name__ == '__main__': 
   app.run(debug = True) 
Save it in a file and then run the script in Python Shell or CMD & Visit http://localhost:5000/.

Note :
Due to Google’s built-in security features, Gmail service may block this login attempt. You may have to decrease the security level. Visit https://myaccount.google.com/lesssecureapps?pli=1 to decrease security.


Get 90% Course fee refund in just 90 Days! Also get 1:1 Mock Interview, Job assistance and more additional benefits on selected courses. Take up the Three 90 challenge today!
Don't miss your chance to ride the wave of the data revolution! Every industry is scaling new heights by tapping into the power of data. Sharpen your skills and become a part of the hottest trend in the 21st century.

Dive into the future of technology - explore the Complete Machine Learning and Data Science Program by GeeksforGeeks and stay ahead of the curve.

User Registration, Login, and Logout in Flask

How To Add Authentication to Your App with Flask-Login
Last Updated : 24 Mar, 2023
Whether it is building a simple blog or a social media site, ensuring user sessions are working correctly can be tricky. Fortunately, Flask-Login provides a simplified way of managing users, which includes easily logging in and out users, as well as restricting certain pages to authenticated users. In this article, we will look at how we can add Authentication to Your App with Flask-Login in Flask using Python. To start, install flask, flask-login, and flask-sqlalchemy:

Flask-Login helps us manage user sessions
Flask-SQLAlchemy helps us store our user’s data, such as their username and password
pip install flask flask-login flask-sqlalchemy
File structure

How To Add Authentication to Your App with Flask-Login
 

Stepwise Implementation
Step 1: Import the necessary modules.

We first import the classes we need from Flask, Flask-SQLAlchemy, and Flask-Login. We then create our flask application, indicate what database Flask-SQLAlchemy should connect to, and initialize the Flask-SQLAlchemy extension. We also need to specify a secret key, which can be any random string of characters, and is necessary as Flask-Login requires it to sign session cookies for protection again data tampering. Next, we initialize the LoginManager class from Flask-Login, to be able to log in and out users.


from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
 
 
# Create a flask application
app = Flask(__name__)
 
# Tells flask-sqlalchemy what database to connect to
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///db.sqlite"
# Enter a secret key
app.config["SECRET_KEY"] = "ENTER YOUR SECRET KEY"
# Initialize flask-sqlalchemy extension
db = SQLAlchemy()
 
# LoginManager is needed for our application 
# to be able to log in and out users
login_manager = LoginManager()
login_manager.init_app(app)
Step 2: Create a User Model & Database

To be able to store users’ information such as their username and password, we need to create a table with Flask-SQLAlchemy, this is done by creating a model that represents the information we want to store. In this case, we first create a Users class and make it a subclass of db.Model to make it a model with the help of Flask-SQLAlchemy. We also make the Users class a subclass of UserMixin, which will help to implement properties such as is_authenticated to the Users class. We will also need to create columns within the user model, to store individual attributes, such as the user’s username. When creating a new column, we need to specify the datatype such as db.Integer and db.String as well. When creating columns, we also need to specify keywords such as unique = True, if we want to ensure values in the column are unique, nullable = False, which indicates that the column’s values cannot be NULL, and primary_key = True, which indicates that the row can be identified by that primary_key index. Next, the db.create_all method is used to create the table schema in the database.


# Create user model
class Users(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(250), unique=True,
                         nullable=False)
    password = db.Column(db.String(250),
                         nullable=False)
 
 
# Initialize app with extension
db.init_app(app)
# Create database within app context
 
with app.app_context():
    db.create_all()
Step 3: Adding a user loader

Before implementing the functionality for authenticating the user, we need to specify a function that Flask-Login can use to retrieve a user object given a user id. This functionality is already implemented by Flask-SQLAlchemy, we simply need to query and use the get method with the user id as the argument.

# Creates a user loader callback that returns the user object given an id
@login_manager.user_loader
def loader_user(user_id):
    return Users.query.get(user_id)
Step 4: Registering new accounts with Flask-Login

Add the following code to a file name sign_up.html in a folder called templates. To allow the user to register an account, we need to create the HTML. This will need to contain a form that allows the user to enter their details, such as their username and chosen password.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sign Up</title>
    <style>
      h1 {
        color: green;
      }
    </style>
  </head>
  <body>
    <nav>
      <ul>
        <li><a href="/login">Login</a></li>
        <li><a href="/register">Create account</a></li>
      </ul>
    </nav>
    <h1>Create an account</h1>
    <form action="#" method="post">
      <label for="username">Username:</label>
      <input type="text" name="username" />
      <label for="password">Password:</label>
      <input type="password" name="password" />
      <button type="submit">Submit</button>
    </form>
  </body>
</html>
Create a route that renders the template, and creates the user account if they make a POST request.

We create a new route with Flask by using the @app.route decorator. The @app.route decorator allows us to specify the route it accepts, and the methods it should accept. By default, it only accepts requests using the GET method, but when the form is submitted it is done using a POST request, so we’ll need to make POST an accepted method for the route as well. Within the register function that is called whenever the user visits that route, we can check if the method used was a POST request using the request variable that Flask provides and that needs to be imported. If a post request was made, this indicates the user is trying to register a new account, so we create a new user using the Users model, with the username and password set to whatever the user entered, which we can get by using request.form.get Lastly, we add the user object that was created to the session and commit the changes made. Once the user account has been created, we redirect them to a route with a callback function called “login”, which we will create in a moment. Ensure that you also import the redirect and url_for functions from Flask.

@app.route('/register', methods=["GET", "POST"])
def register():
  # If the user made a POST request, create a new user
    if request.method == "POST":
        user = Users(username=request.form.get("username"),
                     password=request.form.get("password"))
        # Add the user to the database
        db.session.add(user)
        # Commit the changes made
        db.session.commit()
        # Once user account created, redirect them
        # to login route (created later on)
        return redirect(url_for("login"))
    # Renders sign_up template if user made a GET request
    return render_template("sign_up.html")
Step 5: Allowing users to log in with Flask-Login

Like with creating the registered route, we first need a way for the user to log in through an HTML form. Add the following code to a file named login.html in the same templates folder.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>
    <style>
        h1{
          color: green;
          }
    </style>
  </head>
  <body>
    <nav>
      <ul>
        <li><a href="/login">Login</a></li>
        <li><a href="/register">Create account</a></li>
      </ul>
    </nav>
    <h1>Login to your account</h1>
    <form action="#" method="post">
      <label for="username">Username:</label>
      <input type="text" name="username" />
      <label for="password">Password:</label>
      <input type="password" name="password" />
      <button type="submit">Submit</button>
    </form>
  </body>
</html>
Add the functionality to log in to the user within a login function for the /login route.

With the login route, we do the same thing of checking if the user made a POST request. If they did, we filter the users within the database for a user with the same username as the one being submitted. Next, we check if that user has the same password as the password the user entered in the form. If they are the same, we log-in to the user by using the login_user function provided by Flask-Login. We can then redirect the user back to a route with a function called “home”, which we will create in a moment. If the user didn’t make a POST request, and instead a GET request, then we’ll render the login template.

@app.route("/login", methods=["GET", "POST"])
def login():
    # If a post request was made, find the user by 
    # filtering for the username
    if request.method == "POST":
        user = Users.query.filter_by(
            username=request.form.get("username")).first()
        # Check if the password entered is the 
        # same as the user's password
        if user.password == request.form.get("password"):
            # Use the login_user method to log in the user
            login_user(user)
            return redirect(url_for("home"))
        # Redirect the user back to the home
        # (we'll create the home route in a moment)
    return render_template("login.html")
Step 6: Conditionally rendering HTML based on the user’s authentication status with Flask-Login

When using Flask, it uses Jinja to parse the templates. Jinja is a templating engine that allows us to add code, such as if-else statements within our HTML, we can then use it to conditionally render certain elements depending on the user’s authentication status for example the current_user variable is exported by Flask-Login, and we can use it within the Jinja template to conditionally render HTML based on the user’s authentication status.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home</title>
  </head>
  <body>
    <nav>
      <ul>
        <li><a href="/login">Login</a></li>
        <li><a href="/register">Create account</a></li>
      </ul>
    </nav>
    {% if current_user.is_authenticated %}
    <h1>You are logged in</h1>
    {% else %}
    <h1>You are not logged in</h1>
    {% endif %}
  </body>
</html>
Add the functionality to render the homepage when the user visits the “/” route.

This will then render the template of home.html whenever the user visits the “/” route. After running the code in main.py, navigate to http://127.0.0.1:5000/

@app.route("/")
def home():
    # Render home.html on "/" route
    return render_template("home.html")
Step 7: Adding Logout Functionality

Here, we will update the home.html template to the following to add a logout link, and this will give the homepage a link to log out the user if they are currently logged in.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home</title>
    <style>
      h1 {
        color: green;
      }
    </style>
  </head>
  <body>
    <nav>
      <ul>
        <li><a href="/login">Login</a></li>
        <li><a href="/register">Create account</a></li>
      </ul>
    </nav>
    {% if current_user.is_authenticated %}
    <h1>You are logged in</h1>
    <a href="/logout">Logout</a>
    {% else %}
    <h1>You are not logged in</h1>
    {% endif %}
  </body>
</html>
Complete Code 
Add the logout functionality and code initializer.

from flask import Flask, render_template, request, url_for, redirect
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user
 
app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///db.sqlite"
app.config["SECRET_KEY"] = "abc"
db = SQLAlchemy()
 
login_manager = LoginManager()
login_manager.init_app(app)
 
 
class Users(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(250), unique=True, nullable=False)
    password = db.Column(db.String(250), nullable=False)
 
 
db.init_app(app)
 
 
with app.app_context():
    db.create_all()
 
 
@login_manager.user_loader
def loader_user(user_id):
    return Users.query.get(user_id)
 
 
@app.route('/register', methods=["GET", "POST"])
def register():
    if request.method == "POST":
        user = Users(username=request.form.get("username"),
                     password=request.form.get("password"))
        db.session.add(user)
        db.session.commit()
        return redirect(url_for("login"))
    return render_template("sign_up.html")
 
 
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        user = Users.query.filter_by(
            username=request.form.get("username")).first()
        if user.password == request.form.get("password"):
            login_user(user)
            return redirect(url_for("home"))
    return render_template("login.html")
 
 
@app.route("/logout")
def logout():
    logout_user()
    return redirect(url_for("home"))
 
 
@app.route("/")
def home():
    return render_template("home.html")
 
 
if __name__ == "__main__":
    app.run()
Output:

To test the application, we would navigate to the /register route, create an account and we’ll be redirected to the /login route. From there, we can log in, and we can verify that we have been logged in by the conditional HTML rendering.

How To Add Authentication to Your App with Flask-Login
 

Now, whenever the user is logged in, they can log out by clicking the link within the homepage, which will logout the user, by using the logout_user function provided by Flask-Login.


Add User and Display Current Username in Flask
Last Updated : 27 Feb, 2023
In this article, we’ll talk about how to add a User and Display the Current Username on a Flask website. When we log in using our username and password, we will be taken to the profile page where we can see the welcome message and the username we created during registration. When additional users register using the login credentials we will use here, their names will also appear on the profile page screen. Python code will be connected to a MySQL database to preserve the user login and registration credentials. From there, we can observe how many users have registered and edited their information using phpmyadmin. For making our project we install flask first and create a virtual environment.

Display Username on Multiple Pages using Flask
Templates Files
In the templates folder we basically made three files one for register, another one for login, and at last one for the user so first we write code for register.html

register.html

This HTML file contains a straightforward registration form that asks for three inputs: username, email address, and password. Once these fields have been completed, click the register button to see a flashing message stating that the form has been successfully submitted and that the registration information has been safely saved in the MySQL database. For flashing massage, we are using Jinja2 in an HTML file, so we can now log in using our credentials. If we registered using the same email address, the flash email id will also exist. 


<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>User Registration Form</title>
 
</head>
<style>
    .hi{
        color: green;
    }
    .ok{
        display: block;
        margin-left: 80px;
        margin-top: -15px;
        border: 1px solid black;
    }
    .gfg{
        margin-left: 30px;
        font-weight: bold;
    }
    .gf{
        margin-left: 10px;
        font-weight: bold;
    }
    .btn{
        margin-top: 20px;
        width: 80px;
        height: 25px;
        background-color: orangered;
        color: white;
    }
    .y{
        color: gray;
    }
</style>
<body>
<div class="container">
    <h2 class="hi" > GFG User Registration </h2>
    <h4 class="y"  >Note : fill following details !</h4>
    <form action="{{ url_for('register') }}" method="post">
        {% if message is defined and message %}
            <div class="alert alert-warning">  <strong>  {{ message }} ???? </strong></div>
        {% endif %}
        <br>
        <div class="form-group">
            <label class="gfg">Name:</label>
             <input class="ok" type="text" class="form-control" id="name" name="name" placeholder="Enter name" name="name">
        </div>
        <div class="form-group">
            <label class="gfg">Email:</label>
             <input class="ok" type="email" class="form-control" id="email" name="email" placeholder="Enter email" name="email">
        </div>
        <div class="form-group">
            <label class="gf">Password:</label>
        <input class="ok" type="password" class="form-control" id="password" name="password" placeholder="Enter password" name="pswd">
        </div>    
        <button class="btn" type="submit" class="btn btn-primary">Register</button>
        <p class="bottom">Already have an account?  <a class="bottom" href="{{url_for('login')}}"> Login here</a></p>
    </form>
</div>        
</body>
</html>
Output:


 User Registration page

login.html

In login.html, we have created two straightforward inputs: a username and a password that we successfully registered. If we enter the correct email address and password, it will direct us to the user/login profile page, where we have used the URL for the function to write the file function that we want to display following successful registration.


<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>User Login Form</title>
 
</head>
<style>
    .gfg{
        display: block;
        margin-left: 70px;
        margin-top: -15px;
         
    }
    .ok{
        margin-left: 20px;
        font-weight: bold;
         
    }
    .btn{
        margin-top: 20px;
        width: 80px;
        height: 25px;
        background-color: gray;
        color: white;
 
    }
    .user{
        color: green;
    }
     
</style>
<body>    
<div class="container">
    <h2 class="user"> GFG User Login</h2>
    <form action="{{ url_for('login') }}" method="post">
        {% if message is defined and message %}
            <div class="alert alert-warning"> <strong> {{ message }} ????</strong></div>
        {% endif %}
        <br>
        <div class="form-group">
            <label class="ok">Email:</label>
         <input class="gfg" type="email" class="form-control" id="email" name="email" placeholder="Enter email" name="email">
        </div>
        <div class="form-group">
            <label class="pop"> <strong> Password:</strong></label>
           <input class="gfg" type="password" class="form-control" id="password" name="password" placeholder="Enter password" name="pswd">
        </div>    
        <button class="btn" type="submit" class="btn btn-primary">Login</button>
        <p class="bottom">Don't have an account?  <a class="bottom" href="{{url_for('register')}}"> Register here</a></p>
    </form>
</div>
</body>
</html>
Output:


 User Login.html

user.html

After a successful login, we put a few lines of code to greet the user in these files. We also add a second session. The name code we use during registration means that when we log in, our name will also appear on the screen. Additionally, a button for logging out will appear on the screen; by clicking this button, we can log out and must log in again.

<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>User Account</title>
 
</head>
<style>
.gfg{
    font-size: 25px;
    color: red;
    font-style: italic;
}
</style>
<body>
<div class="container">
    <div class="row">    
        <h2>User Profile</h2>
    </div>
    <br>
    <div class="row">    
        Logged in : <strong class="gfg">  {{session.name}} ???? </strong>| <a href="{{ url_for('logout') }}"> Logout</a>
    </div>
    <br><br>
    <div class="row">
         
        <h2>Welcome to the User profile page... ????</h2> 
    </div>        
</div>
</body>
</html>
Output:


Username display on screen

app.py
Step 1: Import all library

First, the python code is written in a file called app.py. We import all the libraries required for running our application, connecting to MySQL, and performing admin login from the database into this file. Following the import of re(regular expression), which will read the data from our MySQL database, the Python code database, MySQL DB, is used to construct the data for our database. We initialize the flask function and generate a secret key for our flask after importing all modules. The database name, email address, and password are then added to the database.

# Import all important libraries
from flask import *
from flask_mysqldb import MySQL
import MySQLdb.cursors
import re
 
# initialize first flask
app = Flask(__name__)
app.secret_key = 'GeeksForGeeks'
 
# Set MySQL data
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = ''
app.config['MYSQL_DB'] = 'user-table'
 
mysql = MySQL(app)
Step 2: login and logout functions

Then, we develop a functional login() and develop a session for login and registration for a system that also obtains our data from MySQL. A successfully registered message will also appear on the login page when we successfully register on the register page. In this function, we pass the request to the login form by entering our name, password, and email when we click on enter. It will automatically save on our PHPMyAdmin by MySQL data.


# Make login function for login and also make 
# session for login and registration system 
# and also fetch the data from MySQL
@app.route('/')
@app.route('/login', methods=['GET', 'POST'])
def login():
    message = ''
    if request.method == 'POST' and 'email' in
            request.form and 'password' in request.form:
        email = request.form['email']
        password = request.form['password']
        cursor = mysql.connection.cursor
                    (MySQLdb.cursors.DictCursor)
        cursor.execute(
        'SELECT * FROM user WHERE email = % s AND password = % s', 
                      (email, password, ))
        user = cursor.fetchone()
        if user:
            session['loggedin'] = True
            session['userid'] = user['userid']
            session['name'] = user['name']
            session['email'] = user['email']
            message = 'Logged in successfully !'
            return render_template('user.html', 
                                   message=message)
        else:
            message = 'Please enter correct email / password !'
    return render_template('login.html', message=message)
 
 
# Make function for logout session
@app.route('/logout')
def logout():
    session.pop('loggedin', None)
    session.pop('userid', None)
    session.pop('email', None)
    return redirect(url_for('login'))
Step 3: User Registration

On the login screen, we can log in by providing our email address and password. There are also more flashing notifications, such as “User already exists” if we attempt to register again using the same email address. With the same email address, we are able to create two registered accounts. The username we specified on the registration page will also show up on the profile once we successfully log in. For this instance, we typed “GFG.” “Welcome GFG” will appear once we have successfully logged in. That clarifies the entire code as well as its intended use.


# Make a register session for registration 
# session and also connect to Mysql to code for access 
# login and for completing our login
# session and making some flashing massage for error
@app.route('/register', methods=['GET', 'POST'])
def register():
    message = ''
    if request.method == 'POST' and 'name' in
        request.form and 'password' in request.form 
            and 'email' in request.form:
       
        userName = request.form['name']
        password = request.form['password']
        email = request.form['email']
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute('SELECT * FROM user WHERE email = % s', 
                       (email, ))
        account = cursor.fetchone()
        if account:
            message = 'Account already exists !'
        elif not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            message = 'Invalid email address !'
        elif not userName or not password or not email:
            message = 'Please fill out the form !'
        else:
            cursor.execute(
                'INSERT INTO user VALUES (NULL, % s, % s, % s)',
              (userName, email, password, ))
            mysql.connection.commit()
            message = 'You have successfully registered !'
    elif request.method == 'POST':
        message = 'Please fill out the form !'
    return render_template('register.html', message=message)
Complete Code

# Import all important libraries
from flask import *
from flask_mysqldb import MySQL
import MySQLdb.cursors
import re
 
# initialize first flask
app = Flask(__name__)
app.secret_key = 'GeeksForGeeks'
 
# Set MySQL data
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = ''
app.config['MYSQL_DB'] = 'user-table'
 
mysql = MySQL(app)
 
 
@app.route('/')
@app.route('/login', methods=['GET', 'POST'])
def login():
    message = ''
    if request.method == 'POST' and 'email' in
    request.form and 'password' in request.form:
        email = request.form['email']
        password = request.form['password']
        cursor = mysql.connection.cursor
                (MySQLdb.cursors.DictCursor)
        cursor.execute(
            'SELECT * FROM user WHERE email = % s AND password = % s', 
                  (email, password, ))
        user = cursor.fetchone()
        if user:
            session['loggedin'] = True
            session['userid'] = user['userid']
            session['name'] = user['name']
            session['email'] = user['email']
            message = 'Logged in successfully !'
            return render_template('user.html', 
                                   message=message)
        else:
            message = 'Please enter correct email / password !'
    return render_template('login.html', 
                           message=message)
 
 
# Make function for logout session
@app.route('/logout')
def logout():
    session.pop('loggedin', None)
    session.pop('userid', None)
    session.pop('email', None)
    return redirect(url_for('login'))
 
 
@app.route('/register', methods=['GET', 'POST'])
def register():
    message = ''
    if request.method == 'POST' and 'name' in request.form 
            and 'password' in request.form and 'email' in request.form:
        userName = request.form['name']
        password = request.form['password']
        email = request.form['email']
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute('SELECT * FROM user WHERE email = % s', (email, ))
        account = cursor.fetchone()
        if account:
            message = 'Account already exists !'
        elif not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            message = 'Invalid email address !'
        elif not userName or not password or not email:
            message = 'Please fill out the form !'
        else:
            cursor.execute(
                'INSERT INTO user VALUES (NULL, % s, % s, % s)', 
                      (userName, email, password, ))
            mysql.connection.commit()
            message = 'You have successfully registered !'
    elif request.method == 'POST':
        message = 'Please fill out the form !'
    return render_template('register.html', message=message)
 
 
# run code in debug mode
if __name__ == "__main__":
    app.run(debug=True)
After writing whole open your terminal and run the following command

python app.py
Database Output:

After registering multiple users these outputs will show in your database by watching the video you can understand how the username will display on the screen and how multiple users can register and login.


 

When we register multiple users then these types of interfaces will show on our PHP admin panel.


 

Output of code:


Password Hashing with Bcrypt in Flask
Last Updated : 21 Mar, 2023
In this article, we will use Password Hashing with Bcrypt in Flask using Python. Password hashing is the process of converting a plaintext password into a hashed or encrypted format that cannot be easily reverse-engineered to reveal the original password. Bcrypt is a popular hashing algorithm used to hash passwords. It is a password-hashing function that is based on the Blowfish cipher and is designed to be slow and computationally expensive, making it more difficult for attackers to guess or crack passwords.

Key Terminologies:

Password Hashing: The process of converting a plaintext password into a hashed or encrypted format.
Bcrypt: A password-hashing function based on the Blowfish cipher.
Salt: Random data that is used as additional input to a one-way function that hashes a password or passphrase.
Hashing Algorithm: A mathematical function that converts a plaintext password into a fixed-length hash value.
Iterations: The number of times a password is hashed using the bcrypt algorithm.
Stepwise Implement with Bcrypt in Flask
Step 1: Install Flask-Bcrypt

To use Bcrypt in Flask, we need to install the Flask-Bcrypt extension. We can install it using pip.

pip install flask-bcrypt
Step 2: Import Flask-Bcrypt

We need to import the Bcrypt module from Flask-Bcrypt in our Flask app.

from flask_bcrypt import Bcrypt 
Step 3: Create a Bcrypt Object

We need to create a Bcrypt object and pass our Flask app as an argument.

bcrypt = Bcrypt(app) 
Step 4: Hash a Password

We need to decode the hashed password using Python decode(‘utf-8’) as the generate_password_hash() function returns a bytes object. We can hash a password using the generate_password_hash() function of the Bcrypt object.

hashed_password = bcrypt.generate_password_hash 
                ('password').decode('utf-8') 
Step 5: Verify a Password

The check_password_hash() function returns True if the password matches the hashed password, otherwise, it returns False. We can verify a password using the check_password_hash() function of the Bcrypt object.

is_valid = bcrypt.check_password_hash(hashed_password, 'password') 
Complete Code
Here is an example of how to implement Bcrypt in a Flask app.

from flask import Flask 
from flask_bcrypt import Bcrypt 
  
app = Flask(__name__) 
bcrypt = Bcrypt(app) 
  
@app.route('/') 
def index(): 
    password = 'password'
    hashed_password = bcrypt.generate_password_hash 
                            (password).decode('utf-8') 
    is_valid = bcrypt.check_password_hash 
                            (hashed_password, password) 
    return f"Password: {password}<br>Hashed Password:  
                          {hashed_password}<br>Is Valid: {is_valid}" 
  
if __name__ == '__main__': 
    app.run() 
Output:

When we run the Flask app, we will see the following output.

Password Hashing with Bcrypt in Flask
Output

Related Articles: 
Hashing Passwords in Python with BCrypt
How To Hash Passwords In Python


How to store username and password in Flask
Last Updated : 20 Apr, 2023
We’ll discuss how to save a Username and password on a Flask website in this article. We may view the welcome message and the username we chose when registering on the profile page after logging in with our username and password. The names of subsequent users who sign up using the login information we’ll be using here will also show up on the profile page screen. To maintain the user login and registration credentials, Python code will be coupled to a Flask MySQL database. From there, we can utilize phpmyadmin to see how many users have registered and modified their information.

Required module

For making our project we install Flask, and Flask-MySQLdb, and create a virtual environment.

pip install Flask-MySQLdb
pip install Flask
Templates Files
Create a template folder and in the templates folder we basically made three files one for register.html, another one for login.html, and at last one for the user.html.

register.html

This HTML file contains a straightforward registration form that asks for three inputs: username, email address, and password. Once these fields have been completed, click the register button to see a flashing message stating that the form has been successfully submitted and that the registration information has been safely saved in the MySQL database. For flashing massage, we are using Jinja2 in an HTML file, so we can now log in using our credentials. If we registered using the same email address, the flash email id will also exist.


<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>User Registration Form</title>
 
</head>
<style>
    .hi{
        color: green;
    }
    .ok{
        display: block;
        margin-left: 80px;
        margin-top: -15px;
        border: 1px solid black;
    }
    .gfg{
        margin-left: 30px;
        font-weight: bold;
    }
    .gf{
        margin-left: 10px;
        font-weight: bold;
    }
    .btn{
        margin-top: 20px;
        width: 80px;
        height: 25px;
        background-color: orangered;
        color: white;
    }
    .y{
        color: gray;
    }
</style>
<body>
<div class="container">
    <h2 class="hi" > GFG User Registration </h2>
    <h4 class="y"  >Note : fill following details !</h4>
    <form action="{{ url_for('register') }}" method="post">
        {% if message is defined and message %}
            <div class="alert alert-warning">  <strong>  {{ message }} ???? </strong></div>
        {% endif %}
        <br>
        <div class="form-group">
            <label class="gfg">Name:</label>
             <input class="ok" type="text" class="form-control" id="name" name="name" placeholder="Enter name" name="name">
        </div>
        <div class="form-group">
            <label class="gfg">Email:</label>
             <input class="ok" type="email" class="form-control" id="email" name="email" placeholder="Enter email" name="email">
        </div>
        <div class="form-group">
            <label class="gf">Password:</label>
        <input class="ok" type="password" class="form-control" id="password" name="password" placeholder="Enter password" name="pswd">
        </div>    
        <button class="btn" type="submit" class="btn btn-primary">Register</button>
        <p class="bottom">Already have an account?  <a class="bottom" href="{{url_for('login')}}"> Login here</a></p>
    </form>
</div>        
</body>
</html>
Output:


register.html

login.html

In login.html, we have created two straightforward inputs: a username and a password that we successfully registered. If we enter the correct email address and password, It will direct us to the user/login profile page, where we have used the URL for the function to write the file function that we want to display following successful registration.


<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>User Registration Form</title>
 
</head>
<style>
    .hi{
        color: green;
    }
    .ok{
        display: block;
        margin-left: 80px;
        margin-top: -15px;
        border: 1px solid black;
    }
    .gfg{
        margin-left: 30px;
        font-weight: bold;
    }
    .gf{
        margin-left: 10px;
        font-weight: bold;
    }
    .btn{
        margin-top: 20px;
        width: 80px;
        height: 25px;
        background-color: orangered;
        color: white;
    }
    .y{
        color: gray;
    }
</style>
<body>
<div class="container">
    <h2 class="hi" > GFG User Registration </h2>
    <h4 class="y"  >Note : fill following details !</h4>
    <form action="{{ url_for('register') }}" method="post">
        {% if message is defined and message %}
            <div class="alert alert-warning">  <strong>  {{ message }} ???? </strong></div>
        {% endif %}
        <br>
        <div class="form-group">
            <label class="gfg">Name:</label>
             <input class="ok" type="text" class="form-control" id="name" name="name" placeholder="Enter name" name="name">
        </div>
        <div class="form-group">
            <label class="gfg">Email:</label>
             <input class="ok" type="email" class="form-control" id="email" name="email" placeholder="Enter email" name="email">
        </div>
        <div class="form-group">
            <label class="gf">Password:</label>
        <input class="ok" type="password" class="form-control" id="password" name="password" placeholder="Enter password" name="pswd">
        </div>    
        <button class="btn" type="submit" class="btn btn-primary">Register</button>
        <p class="bottom">Already have an account?  <a class="bottom" href="{{url_for('login')}}"> Login here</a></p>
    </form>
</div>        
</body>
</html>
Output:


login.html

user.html

After a successful login, we put a few lines of code to greet the user in these files. We also add a second session. The name code we use during registration means that when we log in, our name will also appear on the screen. Additionally, a button for logging out will appear on the screen; by clicking this button, we can log out and must log in again.

<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>User Account</title>
 
</head>
<style>
.gfg{
    font-size: 25px;
    color: red;
    font-style: italic;
}
</style>
<body>
<div class="container">
    <div class="row">    
        <h2>User Profile</h2>
    </div>
    <br>
    <div class="row">    
        Logged in : <strong class="gfg">  {{session.name}} ???? </strong>| <a href="{{ url_for('logout') }}"> Logout</a>
    </div>
    <br><br>
    <div class="row">
         
        <h2>Welcome to the User profile page... ????</h2> 
    </div>        
</div>
</body>
</html>
Output:


user.html

Setting up app.py file
Step 1:  Import all library

First, the python code is written in a file called app.py. We import all the libraries required for running our application, connecting to MySQL, and performing admin login from the database into this file. Following the import of re(regular expression), which will read the data from our MySQL database, the Python code database, MySQL DB, is used to construct the data for our database. We initialize the flask function and generate a secret key for our flask after importing all modules. The database name, email address, and password are then added to the database.


# Import all important libraries
from flask import *
from flask_mysqldb import MySQL
import MySQLdb.cursors
import re
 
# initialize first flask
app = Flask(__name__)
app.secret_key = 'GeeksForGeeks'
 
# Set MySQL data
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = ''
app.config['MYSQL_DB'] = 'user-table'
 
mysql = MySQL(app)
Step 2: Adding login and logout function

Then, we develop a functional login() and develop a session for login and registration for a system that also obtains our data from MySQL. A successfully registered message will also appear on the login page when we successfully register on the register page. In this function, we pass the request to the login form by entering our name, password, and email when we click on enter. It will automatically save on our PHPMyAdmin by MySQL data.


<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>User Registration Form</title>
 
</head>
<style>
    .hi{
        color: green;
    }
    .ok{
        display: block;
        margin-left: 80px;
        margin-top: -15px;
        border: 1px solid black;
    }
    .gfg{
        margin-left: 30px;
        font-weight: bold;
    }
    .gf{
        margin-left: 10px;
        font-weight: bold;
    }
    .btn{
        margin-top: 20px;
        width: 80px;
        height: 25px;
        background-color: orangered;
        color: white;
    }
    .y{
        color: gray;
    }
</style>
<body>
<div class="container">
    <h2 class="hi" > GFG User Registration </h2>
    <h4 class="y"  >Note : fill following details !</h4>
    <form action="{{ url_for('register') }}" method="post">
        {% if message is defined and message %}
            <div class="alert alert-warning">  <strong>  {{ message }} ???? </strong></div>
        {% endif %}
        <br>
        <div class="form-group">
            <label class="gfg">Name:</label>
             <input class="ok" type="text" class="form-control" id="name" name="name" placeholder="Enter name" name="name">
        </div>
        <div class="form-group">
            <label class="gfg">Email:</label>
             <input class="ok" type="email" class="form-control" id="email" name="email" placeholder="Enter email" name="email">
        </div>
        <div class="form-group">
            <label class="gf">Password:</label>
        <input class="ok" type="password" class="form-control" id="password" name="password" placeholder="Enter password" name="pswd">
        </div>    
        <button class="btn" type="submit" class="btn btn-primary">Register</button>
        <p class="bottom">Already have an account?  <a class="bottom" href="{{url_for('login')}}"> Login here</a></p>
    </form>
</div>        
</body>
</html>
Step 3: Adding User Registration function

On the login screen, we can log in by providing our email address and password. There are also more flashing notifications, such as “User already exists” if we attempt to register again using the same email address. With the same email address, we are able to create two registered accounts. The username we specified on the registration page will also show up on the profile once we successfully log in. For this instance, we typed “GFG.” “Welcome GFG” will appear once we have successfully logged in. That clarifies the entire code as well as its intended use.


# Make a register session for registration
# session and also connect to Mysql to code for access
# login and for completing our login
# session and making some flashing massage for error
@app.route('/register', methods=['GET', 'POST'])
def register():
    message = ''
    if request.method == 'POST' and 'name' in
        request.form and 'password' in request.form
            and 'email' in request.form:
 
        userName = request.form['name']
        password = request.form['password']
        email = request.form['email']
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute('SELECT * FROM user WHERE email = % s', 
                       (email, ))
        account = cursor.fetchone()
        if account:
            message = 'Account already exists !'
        elif not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            message = 'Invalid email address !'
        elif not userName or not password or not email:
            message = 'Please fill out the form !'
        else:
            cursor.execute(
                'INSERT INTO user VALUES (NULL, % s, % s, % s)',
              (userName, email, password, ))
            mysql.connection.commit()
            message = 'You have successfully registered !'
    elif request.method == 'POST':
        message = 'Please fill out the form !'
    return render_template('register.html', message=message)
Complete Code

# Import all important libraries
from flask import *
from flask_mysqldb import MySQL
import MySQLdb.cursors
import re
 
# initialize first flask
app = Flask(__name__)
app.secret_key = 'GeeksForGeeks'
 
# Set MySQL data
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = ''
app.config['MYSQL_DB'] = 'user-table'
 
mysql = MySQL(app)
 
 
@app.route('/')
@app.route('/login', methods=['GET', 'POST'])
def login():
    message = ''
    if request.method == 'POST' and 'email' in
    request.form and 'password' in request.form:
        email = request.form['email']
        password = request.form['password']
        cursor = mysql.connection.cursor
                (MySQLdb.cursors.DictCursor)
        cursor.execute(
            'SELECT * FROM user WHERE email = % s AND password = % s',
                  (email, password, ))
        user = cursor.fetchone()
        if user:
            session['loggedin'] = True
            session['userid'] = user['userid']
            session['name'] = user['name']
            session['email'] = user['email']
            message = 'Logged in successfully !'
            return render_template('user.html',
                                   message=message)
        else:
            message = 'Please enter correct email / password !'
    return render_template('login.html',
                           message=message)
 
 
# Make function for logout session
@app.route('/logout')
def logout():
    session.pop('loggedin', None)
    session.pop('userid', None)
    session.pop('email', None)
    return redirect(url_for('login'))
 
 
@app.route('/register', methods=['GET', 'POST'])
def register():
    message = ''
    if request.method == 'POST' and 'name' in request.form
            and 'password' in request.form and 'email' in request.form:
        userName = request.form['name']
        password = request.form['password']
        email = request.form['email']
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute('SELECT * FROM user WHERE email = % s', (email, ))
        account = cursor.fetchone()
        if account:
            message = 'Account already exists !'
        elif not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            message = 'Invalid email address !'
        elif not userName or not password or not email:
            message = 'Please fill out the form !'
        else:
            cursor.execute(
                'INSERT INTO user VALUES (NULL, % s, % s, % s)', 
                      (userName, email, password ))
            mysql.connection.commit()
            message = 'You have successfully registered !'
    elif request.method == 'POST':
        message = 'Please fill out the form !'
    return render_template('register.html', message=message)
 
 
# run code in debug mode
if __name__ == "__main__":
    app.run(debug=True)
After writing whole open your terminal and run the following command

python app.py
Output:


Complete the output and showing where we save our password and username and how.

Database Output:


Database table

After registering multiple users these outputs will show in your database by watching the video you can understand how the username will display on the screen and how multiple users can register and log in.





Flask – Role Based Access Control
Last Updated : 26 Mar, 2024
Flask is a  micro-framework written in Python. It is used to create web applications using Python. Role-based access control means certain users can access only certain pages. For instance, a normal visitor should not be able to access the privileges of an administrator. In this article, we will see how to implement this type of access with the help of the flask-security library where a Student can access one page, a Staff can access two, a Teacher can access three, and an Admin accesses four pages.

Note: For storing users’ details we are going to use flask-sqlalchemy and db-browser for performing database actions. You can find detailed tutorial here.

Creating the Flask Application
Step 1: Create a Python virtual environment.

To avoid any changes in the system environment, it is better to work in a virtual environment.

Step 2: Install the required libraries

pip install flask flask-security flask-wtf==1.0.1 flask_sqlalchemy email-validator
Step 3: Initialize the flask app.

Import Flask from the flask library and pass __name__ to Flask. Store this in a variable.


# import Flask from flask
from flask import Flask
# pass current module (__name__) as argument
# this will initialize the instance

app = Flask(__name__)
Step 4: Configure some settings that are required for running the app.

To do this we use app.config[‘_____‘]. Using it we can set some important things without which the app might not work.

SQLALCHEMY_DATABASE_URI is the path to the database. SECRET_KEY is used for securely signing the session cookie.
SECURITY_PASSWORD_SALT is only used if the password hash type is set to something other than plain text.
SECURITY_REGISTERABLE allows the application to accept new user registrations. SECURITY_SEND_REGISTER_EMAIL specifies whether the registration email is sent. 
Some of these are not used in our demo, but they are required to mention explicitly.


# path to sqlite database
# this will create the db file in instance
# if database not present already
app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///g4g.sqlite3"
# needed for session cookies
app.config['SECRET_KEY'] = 'MY_SECRET'
# hashes the password and then stores in the database
app.config['SECURITY_PASSWORD_SALT'] = "MY_SECRET"
# allows new registrations to application
app.config['SECURITY_REGISTERABLE'] = True
# to send automatic registration email to user
app.config['SECURITY_SEND_REGISTER_EMAIL'] = False
Step 5: Import SQLAlchemy for database

Because we are using SQLAlchemy for database operations, we need to import and initialize it into the app using db.init_app(app). The app_context() keeps track of the application-level data during a request


# import SQLAlchemy for database operations
# and store the instance in 'db'
from flask_sqlalchemy import SQLAlchemy
db = SQLAlchemy()
db.init_app(app)

# runs the app instance
app.app_context().push()
Step 6: Create DB Models

For storing the user session information, the flask-security library is used. Here to store information of users UserMixin is used by importing from the library. Similarly, to store information about the roles of users, RoleMixin is used. Both are passed to the database tables’ classes.

Here we have created a user table for users containing id, email, password, and active status. The role is a table that contains the roles created with id and role name. The roles_users table contains the information about which user has what roles. It is dependent on the user and role table for user_id and role_id, therefore they are referenced from ForeignKeys.

Then we are creating all those tables using db.create_all() this will make sure that the tables are created in the database for the first time. Keeping or removing it afterward will not affect the app unless a change is made to the structure of the database code.


# import UserMixin, RoleMixin
from flask_security import UserMixin, RoleMixin

# create table in database for assigning roles
roles_users = db.Table('roles_users',
        db.Column('user_id', db.Integer(), db.ForeignKey('user.id')),
        db.Column('role_id', db.Integer(), db.ForeignKey('role.id')))    

# create table in database for storing users
class User(db.Model, UserMixin):
    __tablename__ = 'user'
    id = db.Column(db.Integer, autoincrement=True, primary_key=True)
    email = db.Column(db.String, unique=True)
    password = db.Column(db.String(255), nullable=False, server_default='')
    active = db.Column(db.Boolean())
    # backreferences the user_id from roles_users table
    roles = db.relationship('Role', secondary=roles_users, backref='roled')

# create table in database for storing roles
class Role(db.Model, RoleMixin):
    __tablename__ = 'role'
    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(80), unique=True)
    
# creates all database tables
@app.before_first_request
def create_tables():
    db.create_all()
Now, you have tables but you still don’t have roles created. You have to create those roles(Admin, Teacher, Staff, Student). Keep in mind that the id for Admin role must be 1, for Teacher: 2, Staff: 3 and Student: 4.

Please create a new file in the same folder as app.py, call it create_roles.py and add the below code. remember to execute this file post db creation.


# create_roles.py
from app import Role, User, db

def create_roles():
    admin = Role(id=1, name='Admin')
    teacher = Role(id=2, name='Teacher')
    staff = Role(id=3, name='Staff')
    student = Role(id=4, name='Student')

    db.session.add(admin)
    db.session.add(teacher)
    db.session.add(staff)
    db.session.add(student)

    db.session.commit()
    print("Roles created successfully!")

# Function calling will create 4 roles as planned!
create_roles()
Step 7: Define User and Role in Database

We need to pass this database information to flask_security so as to make the connection between those. For that, we import SQLAlchemySessionUserDatastore and pass the table containing users and then the roles. This datastore is then passed to Security which binds the current instance of the app with the data. We also import LoginManager and login_manager which will maintain the information for the active session. login_user  assigns the user as a current user for the session.


# import required libraries from flask_login and flask_security
from flask_login import LoginManager, login_manager, login_user
from flask_security import Security, SQLAlchemySessionUserDatastore

# load users, roles for a session
user_datastore = SQLAlchemySessionUserDatastore(db.session, User, Role)
security = Security(app, user_datastore)
Step 8: Create a Home Route

The home page of our web app is at the ‘/’ route. So, every time the ‘/’ is routed, the code in index.html file will be rendered using a module render_template. Below the @app.route() decorator, the function needs to be defined so, that code is executed from that function. 


# import the required libraries
from flask import render_template, redirect, url_for

# ‘/’ URL is bound with index() function.
@app.route('/')
# defining function index which returns the rendered html code
# for our home page
def index():
    return render_template("index.html")
index.html

Below is the HTML code for index.html Some logic is applied using the Jinja2 templating engine which behaves similarly to python.  The current_user  variable stores the information of the currently logged-in user. So, here {% if current_user.is_authenticated  %} means if a user is logged in show that code:{{ current_user.email }} is a variable containing the email of the current user. Because the user can have many roles so roles are a list, that’s why a for loop is used. Otherwise, the code in {% else %} part is rendered, finally getting out of the if block with {% endif %}.


<!-- index.html -->

<!-- links to the pages -->
<a href="/teachers">View all Teachers</a> (Access: Admin)<br><br>
<a href="/staff">View all Staff</a> (Access: Admin, Teacher)<br><br>
<a href="/students">View all Students</a> (Access: Admin, Teacher, Staff)<br><br>
<a href="/mydetails">View My Details</a> (Access: Admin, Teacher, Staff, Student)
<br><br>
<!-- Show only if user is logged in -->
{% if current_user.is_authenticated %}
    <!-- Show current users email -->
    <b>Current user</b>: {{current_user.email}}
    <!-- Current users roles -->
    | <b>Role</b>: {% for role in current_user.roles%}
                    {{role.name}}
           {% endfor %} <br><br>
    <!-- link for logging out -->
    <a href="/logout">Logout</a>
<!-- Show if user is not logged in -->
{% else %}
    <a href="/signup">Sign up</a> | <a href="/signin">Sign in</a>
{% endif %}
<br><br>
Output:

How to implement role based access control in Flask?
 

Step 9: Create Signup Route

If the user visits the ‘/signup’ route the request is GET, so the else part will render this HTML page, and if the form is submitted the code in if the condition that is POST method is executed.

The data in the HTML form is requested using the request module. First, we check if the user already exists in the database by querying for the user using the email provided and passing the msg according to that.   

If not then we add the user and append the chosen role to the roles_users DB table, for this we query for the role using the id that we will get from options in the radio button, this will return an object containing all the column attributes of that role, in this case, the id and name of the role. And then log the user in for the user’s current session with login_user(user).


# import 'request' to request data from html
from flask import request

# signup page
@app.route('/signup', methods=['GET', 'POST'])
def signup():
    msg=""
    # if the form is submitted
    if request.method == 'POST':
    # check if user already exists
        user = User.query.filter_by(email=request.form['email']).first()
        msg=""
        # if user already exists render the msg
        if user:
            msg="User already exist"
            # render signup.html if user exists
            return render_template('signup.html', msg=msg)
        
        # if user doesn't exist
        
        # store the user to database
        user = User(email=request.form['email'], active=1, password=request.form['password'])
        # store the role
        role = Role.query.filter_by(id=request.form['options']).first()
        user.roles.append(role)
        
        # commit the changes to database
        db.session.add(user)
        db.session.commit()
        
        # login the user to the app
        # this user is current user
        login_user(user)
        # redirect to index page
        return redirect(url_for('index'))
        
    # case other than submitting form, like loading the page itself
    else:
        return render_template("signup.html", msg=msg)
signup.html page:

Here in the form, the action is ‘#’ which means after submitting the form the current page itself is loaded. The method in the form is POST because we are creating a new entry in the database. There are fields for email, password, and choosing a role with a radio button. In the radio button, the value should be different because that’s the main differentiator of the chosen role.

Also, an if condition is applied using Jinja2, {% if %} which checks that if a user is logged in, and if not  {%else %}  then only shows the form otherwise just shows the already logged-in message.


<!-- signup.html -->

<h2>Sign up</h2>

<!-- Show only if user is logged in -->
{% if current_user.is_authenticated %}
    You are already logged in.

<!-- Show if user is NOT logged in -->    
{% else %}
{{ msg }}<br>

<!-- Form for signup -->
<form action="#" method="POST" id="signup-form">
            <label>Email Address </label>
            <input type="text" name="email" required /><br><br>
            
            <label>Password </label>
            <input type="password" name="password" required/><br><br>
            
            <!-- Options to choose role -->
              <!-- Give the role ids in the value -->
            <input type="radio" name="options" id="option1" value=1 required> Admin </input> 
        <input type="radio" name="options" id="option2" value=2> Teacher </input>
        <input type="radio" name="options" id="option3" value=3> Staff </input>
            <input type="radio" name="options" id="option3" value=4> Student </input><br>
        <br>
        
            <button type="submit">Submit</button><br><br>
            
            <!-- Link for signin -->
            <span>Already have an account?</span>
            <a href="/signin">Sign in</a>
</form>
<!-- End the if block -->
{% endif %}
Output:

How to implement role based access control in Flask?
 

Step 10: Create Signin Route

As you might have noticed we are using two methods GET, and POST. That is because we want to know if the user has just loaded the page (GET) or submitted the form (POST). Then we check if the user exists by querying the database. If the user exists then we see if the password matches. If both are validated the user is logged in using login_user(user). Otherwise, the msg is passed to HTML accordingly i.e., if the password is wrong msg is set to “Wrong password” and if the user doesn’t exist then the msg is set to “User doesn’t exist”.


# signin page
@app.route('/signin', methods=['GET', 'POST'])
def signin():
    msg=""
    if request.method == 'POST':
        # search user in database
        user = User.query.filter_by(email=request.form['email']).first()
        # if exist check password
        if user:
            if  user.password == request.form['password']:
                # if password matches, login the user
                login_user(user)
                return redirect(url_for('index'))
            # if password doesn't match
            else:
                msg="Wrong password"
        
        # if user does not exist
        else:
            msg="User doesn't exist"
        return render_template('signin.html', msg=msg)
        
    else:
        return render_template("signin.html", msg=msg)
signin.html

Similar to the signup page, check if a user is already logged in, if not then show the form asking for email and password. The form method should be POST. Ask in the form for, email and password. We can also show links for sign-up optionally.


<!-- signin.html -->

<h2>Sign in</h2>

<!-- Show only if user is logged in -->
{% if current_user.is_authenticated %}
    You are already logged in.
    
<!-- Show if user is NOT logged in -->    
{% else %}
<!-- msg that was passed while rendering template -->
{{ msg }}<br>

<form action="#" method="POST" id="signin-form">
            <label>Email Address </label>
            <input type="text" name="email" required /><br><br>
            
            <label>Password </label>
            <input type="password" name="password" required/><br><br>
            
            <input class="btn btn-primary" type="submit" value="Submit"><br><br>
    
            <span>Don't have an account?</span>
            <a href="/signup">Sign up</a>
</form>
{% endif %}
Output:

How to implement role based access control in Flask?
 

Step 11: Create a Teacher Route

We are passing the users with the role of Teacher to the HTML template. On the home page if we click any link then it will load the same page if the user is not signed in. If the user is signed in we want to give Role Based Access so that the user with the role:

Students can access View My Details page.
Staff can access View My Details and View all Students pages.
The teacher can access View My Details, View all Students, and View all Staff pages.
Admin can access View My Details, View all Students, View all Staff, and View all Teachers pages.
We need to import, roles_accepted: this will check the database for the role of the user and if it matches the specified roles then only the user is given access to that page. The teacher’s page can be accessed by Admin only using @roles_accepted(‘Admin’). 


# to implement role based access
# import roles_accepted from flask_security
from flask_security import roles_accepted

# for teachers page
@app.route('/teachers')
# only Admin can access the page
@roles_accepted('Admin')
def teachers():
    teachers = []
    # query for role Teacher that is role_id=2
    role_teachers = db.session.query(roles_users).filter_by(role_id=2)
    # query for the users' details using user_id
    for teacher in role_teachers:
        user = User.query.filter_by(id=teacher.user_id).first()
        teachers.append(user)
    # return the teachers list
    return render_template("teachers.html", teachers=teachers)
teachers.html

The teachers passed in the render_template is a list of objects, containing all the columns of the user table, so we’re using Python for loop in jinja2 to show the elements in the list in HTML ordered list tag.


<!-- teachers.html -->

<h3>Teachers</h3>

<!-- list that shows all teachers' email -->
<ol>
{% for teacher in teachers %}
<li>
{{teacher.email}}
</li>
{% endfor %}
</ol>
Output:

How to implement role based access control in Flask?
 

Step 12: Create staff, student, and mydetail Routes

Similarly, routes for other pages are created by adding the roles to the decorator @roles_accepted().


# for staff page
@app.route('/staff')
# only Admin and Teacher can access the page
@roles_accepted('Admin', 'Teacher')
def staff():
    staff = []
    role_staff = db.session.query(roles_users).filter_by(role_id=3)
    for staf in role_staff:
        user = User.query.filter_by(id=staf.user_id).first()
        staff.append(user)
    return render_template("staff.html", staff=staff)
    
# for student page
@app.route('/students')
# only Admin, Teacher and Staff can access the page
@roles_accepted('Admin', 'Teacher', 'Staff')
def students():
    students = []
    role_students = db.session.query(roles_users).filter_by(role_id=4)
    for student in role_students:
        user = User.query.filter_by(id=student.user_id).first()
        students.append(user)
    return render_template("students.html", students=students)
    
# for details page
@app.route('/mydetails')
# Admin, Teacher, Staff and Student can access the page
@roles_accepted('Admin', 'Teacher', 'Staff', 'Student')
def mydetails():
    return render_template("mydetails.html")
staff.html

Here, we are iterating all the staff and extracting their email IDs.


<! staff.html -->

<h3>Staff</h3>
<ol>
{% for staf in staff %}
<li>
{{staf.email}}
</li>
{% endfor %}
</ol>
Output:

How to implement role based access control in Flask?
 

student.html

Here, we are iterating all the students and extracting their email IDs.


<!-- students.html -->

<h3>Students</h3>
<ol>
{% for student in students %}
<li>
{{student.email}}
</li>
{% endfor %}
</ol>
Output:

How to implement role based access control in Flask?
 

mydetails.html

Similar to the index page, to show the role use a for loop from Jinja2, because a user can more than one role i.e., current_user.roles is a list of roles that were queried from the database.


<!-- mydetails.html -->

<h3>My Details</h3><br>
<b>My email</b>: {{current_user.email}}
| <b>Role</b>: {% for role in current_user.roles%}
                    {{role.name}}
       {% endfor %} <br><br>
Output:

How to implement role based access control in Flask?
 

Step 13: Finally, Add code Initializer.

Here, debug is set to True. When in a development environment. It can be set to False when the app is ready for production.


#for running the app
if __name__ == "__main__":  
    app.run(debug = True)
Now test your app by running the below command in the terminal.

python app.py
Go to:

http://127.0.0.1:5000
Output:



How to use Flask-Session in Python Flask ?
Last Updated : 16 Jun, 2022
Flask Session – 
Flask-Session is an extension for Flask that supports Server-side Session to your application.
The Session is the time between the client logs in to the server and logs out of the server.
The data that is required to be saved in the Session is stored in a temporary directory on the server.
The data in the Session is stored on the top of cookies and signed by the server cryptographically.
Each client will have their own session where their own data will be stored in their session.
Uses of Session
Remember each user when they log in
Store User-specific website settings (theme)
Store E-Commerce site user items in the cart
This article assumes you are familiar with flask basics. Checkout – Flask – (Creating first simple application) to learn how to make a simple web application in flask.

Installation
Install the extension with the following command

$ easy_install Flask-Session
Alternatively, if you have pip installed

$ pip install Flask-Session
Configuring  Session  in  Flask
The Session instance is not used for direct access. You should always use flask_session.
The First line (session) from the flask is in such a way that each of us as a user gets our own version of the session.
from flask import Flask, render_template, redirect, request, session
from flask_session import Session
This is specific to the flask_session library only

SESSION_PERMANENT = False –  So this session has a default time limit of some number of minutes or hours or days after which it will expire.
SESSION_TYPE = “filesystem” –   It will store in the hard drive (these files are stored under a /flask_session folder in your config directory.) or any online ide account, and it is an alternative to using a Database or something else like that.
app = Flask(__name__)
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)
Remember User After Login
So we will start making two basic pages and their route called index.html and login.html

login.html contains a form in which the user can fill their name and submit 
index.html is the main page 
@app.route("/")
def index():
    return render_template('index.html')
 
 
@app.route("/login", methods=["POST", "GET"])
def login():
    return render_template("login.html")
We need to record the username in the session when they submit the form
And we are using a dictionary in python where “name” is the key = request.form.get(“name”) is a value
@app.route("/login", methods=["POST", "GET"])
def login():
  # if form is submited
    if request.method == "POST":
        # record the user name
        session["name"] = request.form.get("name")
        # redirect to the main page
        return redirect("/")
    return render_template("login.html")
After storing the user name we need to check whenever user lands on the index page that any session with that user name exists or not.
If the user name doesn’t exist then redirect to the login page.
@app.route("/")
def index():
  # check if the users exist or not
    if not session.get("name"):
        # if not there in the session then redirect to the login page
        return redirect("/login")
    return render_template('index.html')
After successfully remember the user we also need a way to logout the users.
So whenever the user clicks logout change the user value to none and redirect them to the index page.
@app.route("/logout")
def logout():
    session["name"] = None
    return redirect("/")
Complete Project –
from flask import Flask, render_template, redirect, request, session
# The Session instance is not used for direct access, you should always use flask.session
from flask_session import Session
 
app = Flask(__name__)
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)
 
 
@app.route("/")
def index():
    if not session.get("name"):
        return redirect("/login")
    return render_template('index.html')
 
 
@app.route("/login", methods=["POST", "GET"])
def login():
    if request.method == "POST":
        session["name"] = request.form.get("name")
        return redirect("/")
    return render_template("login.html")
 
 
@app.route("/logout")
def logout():
    session["name"] = None
    return redirect("/")
 
 
if __name__ == "__main__":
    app.run(debug=True)
index.html
We can also use session.name to excess the value from the session.

{% extends "layout.html" %}
 
{% block y %}
 
   {% if session.name %}
      You are Register {{ session.name }} <a href="/logout">logout</a>.
   {% else %}
      You are not Register. <a href="/login">login</a>.
   {% endif %}
 
{% endblock %}
login.html
{% extends "layout.html" %}
 
{% block y %}
 
   <h1> REGISTER </h1>
 
   <form action="/login" method="POST">
      <input placeholder="Name" autocomplete="off" type="text" name="name">
      <input type="submit" name="Register">
   </form>
 
{% endblock %}
layout.html
<!DOCTYPE html>
 
<html lang="en">
    <head>
        <meta name="viewport" content="initial-scale=1, width=device-width">
        <title> flask </title>
    </head>
    <body>
        {% block y %}{% endblock %}
    </body>
</html>
Output – 
login.html


index.html


You can also see your  generated  session.



Flask Cookies
Last Updated : 05 Feb, 2023
Flask is a lightweight, web development framework built using python language. Generally, for building websites we use HTML, CSS and JavaScript but in flask the python scripting language is used for developing the web-applications.

To know more about Flask and how to run an application in Flask: Flask – First Application Creation

What are Cookies?

Technically, cookies track user activity to save user information in the browser as key-value pairs, which can then be accessed whenever necessary by the developers to make a website easier to use. These enhances the personal user experience on a particular website by remembering your logins, your preferences and much more. 

For running a flask application, we need to have some prerequisites like installing the flask. 

Prerequisites:

Use the upgraded version of pip by below command in your terminal. In this article, I am using Visual Studio Code to run my flask applications.

Python -m pip install –upgrade pip
Python -m pip install flask 
Setting Cookies in Flask:
set_cookie( ) method: Using this method we can generate cookies in any application code. The syntax for this cookies setting method:

Response.set_cookie(key, value = '', max_age = None, expires = None, path = '/', domain = None, 
                    secure = None, httponly = False)
Parameters: 

key – Name of the cookie to be set.
value – Value of the cookie to be set.
max_age – should be a few seconds, None (default) if the cookie should last as long as the client’s browser session.
expires – should be a datetime object or UNIX timestamp.
domain – To set a cross-domain cookie.
path – limits the cookie to given path, (default) it will span the whole domain.
Example:

from flask import Flask, request, make_response 
  
app = Flask(__name__) 
  
# Using set_cookie( ) method to set the key-value pairs below. 
@app.route('/setcookie') 
def setcookie(): 
    
      # Initializing response object 
    resp = make_response('Setting the cookie')  
    resp.set_cookie('GFG','ComputerScience Portal') 
    return resp 
  
app.run()
Running the code in Visual Studio Code application.


My Visual Studio Code terminal

Output: Go to the above-mentioned url in the terminal -For Example – http://127.0.0.1:5000/route-name.  Here the route-name is setcookie.


Output

Getting Cookies in Flask:
cookies.get( )

This get( ) method retrieves the cookie value stored from the user’s web browser through the request object.

from flask import Flask, request, make_response 
app = Flask(__name__) 
  
# getting cookie from the previous set_cookie code 
@app.route('/getcookie') 
def getcookie(): 
    GFG = request.cookies.get('GFG') 
    return 'GFG is a '+ GFG 
  
app.run()
Output:


 

Login Application in Flask using cookies
Let’s develop a simple login page with Flask using cookies. First, we are creating the main python file – app.py in our code editor. Next, we will create the UI of our web page which is Login.html where the user can enter his username and password. In this app.py, we are storing the username as cookie to know which user logged in to the website. In the below code, we are requesting the stored cookie from the browser and displaying it on the next page which routes to user details page.

app.py

from flask import Flask, request, make_response, render_template 
  
app = Flask(__name__) 
  
@app.route('/', methods = ['GET']) 
def Login(): 
   return render_template('Login.html') 
  
@app.route('/details', methods = ['GET','POST']) 
def login(): 
    if request.method == 'POST': 
        name = request.form['username'] 
        output = 'Hi, Welcome '+name+ '' 
        resp = make_response(output) 
        resp.set_cookie('username', name) 
    return resp 
  
app.run(debug=True) 
Login.html

<!DOCTYPE html> 
<html> 
    <head> 
        <title>Login</title> 
    </head> 
    <body> 
        <form method="post" action="/details"> 
            <label for="username">Username</label> 
            <input type="text" name="username" id="username"/>  
            <br/> 
            <br> 
            <label for="password">Password</label> 
            <input type="password" name="password" id="password"/>  
            <br/> 
            <br> 
            <input type="submit" name="submit" id="submit" value="Login"/>  
        </form> 
    </body> 
</html>
Output:


Login Page


User Logging


User Logged In and Cookie Tracker

From the above image, the user can also see the cookies of a website. Here, ‘username’ is the key and its value is ‘Greeshma’ which reminds us that cookies are generally key-value pairs. To see the cookies in your browser, click the last 3 dots on the browser’s right corner>> More Tools>>Developer Tools>>Application window.   

Getting website Visitors counted through cookies
In the below code, we want to know the number of visitors visiting our website. We are first retrieving the visitor’s count by the usage of cookies. But there is no variable named visitors count that we created previously. As this key(visitors count) is not present in the dictionary, it will take the value of 0 that is specified in the second parameter as per the dictionary collection in python. Hence, for the first-time visitors count=0, then incrementing the count according to the user’s visit to the website. The make_response( ) gets the response object and is used for setting the cookie. 

from flask import Flask, request, make_response 
  
app = Flask(__name__) 
app.config['DEBUG'] = True
  
  
@app.route('/') 
def vistors_count(): 
    # Converting str to int 
    count = int(request.cookies.get('visitors count', 0)) 
    # Getting the key-visitors count value as 0 
    count = count+1
    output = 'You visited this page for '+str(count) + ' times'
    resp = make_response(output) 
    resp.set_cookie('visitors count', str(count)) 
    return resp 
  
  
@app.route('/get') 
def get_vistors_count(): 
    count = request.cookies.get('visitors count') 
    return count 
  
  
app.run() 
Output: Url – http://127.0.0.1:5000


Output

Url for below output- http://127.0.0.1:5000/get


Visitors count output using cookies

In the above output screenshot, the value of the website visitors count is retrieved using request.cookies.get( ) method.

Cookies Tracking in Browser –


Cookie Tracker for visitors count application

The flask cookies can be secured by putting the secure parameter in response.set_cookie(‘key’, ‘value’, secure = True) and it is the best-recommended practice to secure cookies on the internet.

How to return a JSON response from a Flask API ?
Last Updated : 12 Jun, 2023
Flask is one of the most widely used python micro-frameworks to design a REST API. In this article, we are going to learn how to create a simple REST API that returns a simple JSON object, with the help of a flask.

Prerequisites: Introduction to REST API

What is a REST API?

REST stands for Representational State Transfer and is an architectural style used in modern web development. It defines a set or rules/constraints for a web application to send and receive data. In this article, we will build a REST API in Python using the Flask framework. Flask is a popular micro framework for building web applications.

Approaches: We are going to write a simple flask API that returns a JSON response using two approaches:

Using Flask jsonify object.
Using the flask_restful library with Flask.
Libraries Required:

Install the python Flask library using the following command:
pip install Flask
Install the flask-restful library using the following command:
pip install Flask-RESTful
Approach 1: Using Flask jsonify object – In this approach, we are going to return a JSON response using the flask jsonify method. We are not going to use the flask-restful library in this method.

Create a new python file named ‘main.py’.
import Flask, jsonify, and request from the flask framework.
Register the web app into an app variable using the following syntax.
app = Flask(__name__)
Create a new function named ‘ReturnJSON’. This function is going to return the sample JSON response.
Route the ‘ReturnJSON’ function to your desired URL using the following syntax.
@app.route('/path_of_the_response', methods = ['GET'])
def ReturnJSON():
  pass
Inside the ‘ReturnJSON’ function if the request method is ‘GET’ then create a python dictionary with the two elements message.
Jsonify the python dictionary and return it.
Build the flask application using the following command.
if __name__=='__main__':
    app.run(debug=True)
Run the ‘main.py’ file in the terminal or the IDE.
Code:

from flask import Flask,jsonify,request 
  
app =   Flask(__name__) 
  
@app.route('/returnjson', methods = ['GET']) 
def ReturnJSON(): 
    if(request.method == 'GET'): 
        data = { 
            "Modules" : 15, 
            "Subject" : "Data Structures and Algorithms", 
        } 
  
        return jsonify(data) 
  
if __name__=='__main__': 
    app.run(debug=True)
Output:



Approach 2: Using the flask_restful library with Flask – In this approach, we are going to create a simple JSON response with the help of the flask-restful library. The steps are discussed below:

Create a new python file named ‘main.py’.
Import Flask from the flask framework.
Import API and Resource from the ‘flask_restful’ library.
Register the web app into an app variable using the following syntax.
app = Flask(__name__)
Register the app variable as an API object using the API method of the ‘flask_restful’  library.
api = Api(app)
Create a resource class named ‘ReturnJSON’.
Inside the resource, the class creates a ‘get’ method.
Return a dictionary with the simple JSON response from the ‘get’ method.
Add the resource class to the API using the add_resource method.
Build the flask application using the following command.
if __name__=='__main__':
    app.run(debug=True)
Run the ‘main.py’ file in the terminal or the IDE.
Code:

from flask import Flask 
from flask_restful import Api, Resource 
  
app =   Flask(__name__) 
  
api =   Api(app) 
  
class returnjson(Resource): 
    def get(self): 
        data={ 
            "Modules": 15,  
            "Subject": "Data Structures and Algorithms"
        } 
        return data 
  
api.add_resource(returnjson,'/returnjson') 
  
  
if __name__=='__main__': 
    app.run(debug=True)
Output:




Define and Access the Database in Flask

Connect Flask to a Database with Flask-SQLAlchemy
Last Updated : 28 Dec, 2021
Flask is a micro web framework written in python. Micro-framework is normally a framework with little to no dependencies on external libraries. Though being a micro framework almost everything can be implemented using python libraries and other dependencies when and as required.

In this article, we will be building a Flask application that takes data in a form from the user and then displays it on another page on the website. We can also delete the data. We won’t focus on the front-end part rather we will be just coding the backend for the web application.

Installing Flask
In any directory where you feel comfortable create a folder and open the command line in the directory. Create a python virtual environment using the command below.

python -m venv <name>
Once the command is done running activate the virtual environment using the command below.

<name>\scripts\activate
Now, install Flask using pip(package installer for python). Simply run the command below.

pip install Flask
Creating app.py
Once the installation is done create a file name app.py and open it in your favorite editor. To check whether Flask has been properly installed you can run the following code.

from flask import Flask
app = Flask(__name__)
 
 
'''If everything works fine you will get a 
message that Flask is working on the first
page of the application
'''
 
@app.route('/')
def check():
    return 'Flask is working'
 
 
if __name__ == '__main__':
    app.run()
Output:



Setting Up SQLAlchemy
Now, let’s move on to creating a database for our application. For the purpose of this article, we will be using SQLAlchemy a database toolkit, and an ORM(Object Relational Mapper). We will be using pip again to install SQLAlchemy. The command is as follows,

pip install flask-sqlalchemy
In your app.py file import SQLAlchemy as shown in the below code. We also need to add a configuration setting to our application so that we can use SQLite database in our application. We also need to create an SQLAlchemy database instance which is as simple as creating an object.

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
 
app = Flask(__name__)
app.debug = True
 
# adding configuration for using a sqlite database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
 
# Creating an SQLAlchemy instance
db = SQLAlchemy(app)
 
if __name__ == '__main__':
    app.run()
Creating Models
In sqlalchemy we use classes to create our database structure. In our application, we will create a Profile table that will be responsible for holding the user’s id, first name, last name, and age.

from flask import Flask, request, redirect
from flask.templating import render_template
from flask_sqlalchemy import SQLAlchemy
 
app = Flask(__name__)
app.debug = True
 
# adding configuration for using a sqlite database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
 
# Creating an SQLAlchemy instance
db = SQLAlchemy(app)
 
# Models
class Profile(db.Model):
    # Id : Field which stores unique id for every row in 
    # database table.
    # first_name: Used to store the first name if the user
    # last_name: Used to store last name of the user
    # Age: Used to store the age of the user
    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(20), unique=False, nullable=False)
    last_name = db.Column(db.String(20), unique=False, nullable=False)
    age = db.Column(db.Integer, nullable=False)
 
    # repr method represents how one object of this datatable
    # will look like
    def __repr__(self):
        return f"Name : {self.first_name}, Age: {self.age}"
 
if __name__ == '__main__':
    app.run()
The table below explains some of the keywords used in the model class. 

Column	used to create a new column in the database table
Integer	An integer data field
primary_key	If set to True for a field ensures that the field can be used to uniquely identify objects of the data table.
String	An string data field. String(<maximum length>)
unique	If set to True it ensures that every data in that field in unique.
nullable	If set to False it ensures that the data in the field cannot be null.
__repr__	Function used to represent objects of the data table.
Creating the database
In the command line which is navigated to the project directory and virtual environment running, we need to run the following commands. 

python
The above command will initiate a python bash in your command line where you can use further lines of code to create your data table according to your model class in your database. 

from app import db
db.create_all()
After the commands, the response would look like something in the picture and in your project directory you will notice a new file named ‘site.db’. 



Making Migrations in database
Install Flask-Migrate using pip 

pip install Flask-Migrate
Now, in your app.py add two lines, the code being as follows, 

# Import for Migrations
from flask_migrate import Migrate, migrate
 
# Settings for migrations
migrate = Migrate(app, db)
Now to create migrations we run the following commands one after the other.

flask db init
flask db init
flask db init

flask db migrate -m "Initial migration"
flask db migrate
flask db migrate -m “Initial migration”

flask db upgrade
flask db upgrade
flask db upgrade

Now we have successfully created the data table in our database.

Creating the Index Page Of the Application
Before moving forward and building our form let’s create an index page for our website. The HTML file is always stored inside a folder in the parent directory of the application named ‘templates’. Inside the templates folder create a file named index.html and paste the below code for now. We will go back to adding more code into our index file as we move on.

<html>
   <head>
      <title>Index Page</title>
   </head>
   <body>
      <h3>Profiles</h3>
   </body>
</html>
 In the app.py add a small function that will render an HTML page at a specific route specified in app.route. 

from flask import Flask, request, redirect
from flask.templating import render_template
from flask_sqlalchemy import SQLAlchemy
 
app = Flask(__name__)
app.debug = True
 
# adding configuration for using a sqlite database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
 
# Creating an SQLAlchemy instance
db = SQLAlchemy(app)
 
# Models
class Profile(db.Model):
 
    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(20), unique=False, nullable=False)
    last_name = db.Column(db.String(20), unique=False, nullable=False)
    age = db.Column(db.Integer, nullable=False)
 
    def __repr__(self):
        return f"Name : {self.first_name}, Age: {self.age}"
 
# function to render index page
@app.route('/')
def index():
    return render_template('index.html')
 
if __name__ == '__main__':
    app.run()
To test whether everything is working fine you can run your application using the command 

python app.py
The command will set up a local server at http://localhost:5000.

Output:



Creating HTML page for form
We will be creating an HTML page in which our form will be rendered. Create an HTML file named add_profile in your templates folder. The HTML code is as follows. The important points in the code will be highlighted as you read on.

<!DOCTYPE html>
<html>
   <head>
      <title>Add Profile</title>
   </head>
   <body>
      <h3>Profile form</h3>
      <form action="/add" method="POST">
         <label>First Name</label>
         <input type="text" name="first_name" placeholder="first name...">
         <label>Last Name</label>
         <input type="text" name= "last_name" placeholder="last name...">
         <label>Age</label>
         <input type="number" name="age" placeholder="age..">
         <button type="submit">Add</button>
      </form>
   </body>
</html>
Adding a function in our application to render the form page

In our app.py file, we will add the following function. At route or site path ‘http://localhost:5000/add_data’ the page will be rendered. 

@app.route('/add_data')
def add_data():
    return render_template('add_profile.html')
 
To check whether the code is working fine or not, you can run the following command to start the local server. 

python app.py
Now, visit http://localhost:5000/add_data and you will be able to see the form.

Output: 



Function to add data using the form to the database
To add data to the database we will be using the “POST” method. POST is used to send data to a server to create/update a resource. In flask where we specify our route that is app.route we can also specify the HTTP methods there. Then inside the function, we create variables to store data and use request objects to procure data from the form. 

Note: The name used in the input tags in the HTML file has to be the same one that is being been used in this function,

For example,  

<input type="number" name="age" placeholder="age..">
“age” should also be used in the python function as, 

age = request.form.get("age")
Then we move on to create an object of the Profile class and store it in our database using database sessions. 

# function to add profiles
@app.route('/add', methods=["POST"])
def profile():
     
    # In this function we will input data from the 
    # form page and store it in our database.
    # Remember that inside the get the name should
    # exactly be the same as that in the html
    # input fields
    first_name = request.form.get("first_name")
    last_name = request.form.get("last_name")
    age = request.form.get("age")
 
    # create an object of the Profile class of models
    # and store data as a row in our datatable
    if first_name != '' and last_name != '' and age is not None:
        p = Profile(first_name=first_name, last_name=last_name, age=age)
        db.session.add(p)
        db.session.commit()
        return redirect('/')
    else:
        return redirect('/')
Once the function is executed it redirects us back to the index page of the application.

Display data on Index Page
On our index page now, we will be displaying all the data that has been stored in our data table. We will be using ‘Profile.query.all()‘ to query all the objects of the Profile class and then use Jinja templating language to display it dynamically on our index HTML file.

Update your index file as follows. The delete function will be written later on in this article. For now, we will query all the data from the data table and display it on our home page.

<!DOCTYPE html>
<html>
   <head>
      <title>Index Page</title>
   </head>
   <body>
      <h3>Profiles</h3>
      <a href="/add_data">ADD</a>
      <br>
      <table>
         <thead>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Age</th>
            <th>#</th>
         </thead>
         {% for data in profiles %}
         <tbody>
            <td>{{data.id}}</td>
            <td>{{data.first_name}}</td>
            <td>{{data.last_name}}</td>
            <td>{{data.age}}</td>
            <td><a href="/delete/{{data.id}}" type="button">Delete</a></td>
         </tbody>
         {% endfor%}
      </table>
   </body>
</html>
 
We loop through every object in profiles that we pass down to our template in our index function and print all its data in a tabular form. The index function in our app.py is updated as follows. 

@app.route('/')
def index():
      # Query all data and then pass it to the template
    profiles = Profile.query.all()
    return render_template('index.html', profiles=profiles)
Deleting data from our database
To delete data we have already used an anchor tag in our table and now we will just be associating a function with it.

@app.route('/delete/<int:id>')
def erase(id):
    # Deletes the data on the basis of unique id and 
    # redirects to home page
    data = Profile.query.get(id)
    db.session.delete(data)
    db.session.commit()
    return redirect('/')
The function queries data on the basis of id and then deletes it from our database.

Complete Code

The entire code for app.py, index.html, and add-profile.html has been given. 

app.py

from flask import Flask, request, redirect
from flask.templating import render_template
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate, migrate
 
app = Flask(__name__)
app.debug = True
 
# adding configuration for using a sqlite database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
 
# Creating an SQLAlchemy instance
db = SQLAlchemy(app)
 
# Settings for migrations
migrate = Migrate(app, db)
 
# Models
class Profile(db.Model):
    # Id : Field which stores unique id for every row in 
    # database table.
    # first_name: Used to store the first name if the user
    # last_name: Used to store last name of the user
    # Age: Used to store the age of the user
    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(20), unique=False, nullable=False)
    last_name = db.Column(db.String(20), unique=False, nullable=False)
    age = db.Column(db.Integer, nullable=False)
 
    # repr method represents how one object of this datatable
    # will look like
    def __repr__(self):
        return f"Name : {self.first_name}, Age: {self.age}"
 
# function to render index page
@app.route('/')
def index():
    profiles = Profile.query.all()
    return render_template('index.html', profiles=profiles)
 
@app.route('/add_data')
def add_data():
    return render_template('add_profile.html')
 
# function to add profiles
@app.route('/add', methods=["POST"])
def profile():
    # In this function we will input data from the 
    # form page and store it in our database. Remember 
    # that inside the get the name should exactly be the same 
    # as that in the html input fields
    first_name = request.form.get("first_name")
    last_name = request.form.get("last_name")
    age = request.form.get("age")
 
    # create an object of the Profile class of models and 
    # store data as a row in our datatable
    if first_name != '' and last_name != '' and age is not None:
        p = Profile(first_name=first_name, last_name=last_name, age=age)
        db.session.add(p)
        db.session.commit()
        return redirect('/')
    else:
        return redirect('/')
 
@app.route('/delete/<int:id>')
def erase(id):
     
    # deletes the data on the basis of unique id and 
    # directs to home page
    data = Profile.query.get(id)
    db.session.delete(data)
    db.session.commit()
    return redirect('/')
 
if __name__ == '__main__':
    app.run()
index.html 

<!DOCTYPE html>
<html>
   <head>
      <title>Index Page</title>
   </head>
   <body>
      <h3>Profiles</h3>
      <a href="/add_data">ADD</a>
      <br>
      <table>
         <thead>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Age</th>
            <th>#</th>
         </thead>
         {% for data in profiles %}
         <tbody>
            <td>{{data.id}}</td>
            <td>{{data.first_name}}</td>
            <td>{{data.last_name}}</td>
            <td>{{data.age}}</td>
            <td><a href="/delete/{{data.id}}" type="button">Delete</a></td>
         </tbody>
         {% endfor%}
      </table>
   </body>
</html>
add_profile.html 

<!DOCTYPE html>
<html>
   <head>
      <title>Add Profile</title>
   </head>
   <body>
      <h3>Profile form</h3>
      <form action="/add" method="POST">
         <label>First Name</label>
         <input type="text" name="first_name" placeholder="first name...">
         <label>Last Name</label>
         <input type="text" name= "last_name" placeholder="last name...">
         <label>Age</label>
         <input type="number" name="age" placeholder="age..">
         <button type="submit">Add</button>
      </form>
   </body>
</html>
Output:



 How to Build a Web App using Flask and SQLite in Python
Last Updated : 09 Jan, 2023
Python-based Flask is a microweb framework. Typically, a micro-framework has little to no dependencies on outside frameworks. Despite being a micro framework, practically everything may be developed when and as needed utilizing Python libraries and other dependencies. In this post, we’ll develop a Flask application that collects user input in a form and shows it on an additional web page using SQLite in Python.

Package Required

Install flask to proceed with the Front End of the Web App.

pip install flask
pip install db-sqlite3
Steps to  Build an App Using Flask and SQLite
Step 1: Create Virtual Environment

Step 2: Install the required modules inside Virtual Environment.

Step 3: Build a Front End of the Web App.

index.html
The index.html file will contain two buttons, one button to check all the participant’s lists (taken from the database). And the other button to create a new entry. 

<!DOCTYPE html> 
<html> 
    <head> 
        <title>Flask and SQLite </title> 
    </head> 
    <body> 
        <h1>Build Web App Using Flask and SQLite</h1> 
        <button class="btn" type="button" onclick="window.location.href='{{ url_for('join') }}';">Fill form to get updates</button><br/> 
        <button class="btn" type="button" onclick="window.location.href='{{ url_for('participants') }}';">Check participant list</button> 
    </body> 
</html> 
join.html
In the join.html, create a simple form that takes Name, Email, City, Country and Phone as the input to store in the database. By the POST method, receive the form request of all the columns and commit the changes in the database after inserting the details in the table. 

<!DOCTYPE html> 
<html> 
    <head> 
        <title>Flask and SQLite </title> 
    </head> 
    <body> 
        <form method="POST"> 
            <label>Enter Name:</label> 
            <input type="name" name="name" placeholder="Enter your name" required><br/> 
            <label>Enter Email:</label> 
            <input type="email" name="email" placeholder="Enter your email" required><br/> 
            <label>Enter City:</label> 
            <input type="name" name="city" placeholder="Enter your City name" required><br/> 
            <label>Enter Country:</label> 
            <input type="name" name="country" placeholder="Enter the Country name" required><br/> 
            <label>Enter phone num:</label> 
            <input type="name" name="phone" placeholder="Your Phone Number" required><br/> 
            <input type = "submit" value = "submit"/><br/> 
        </form> 
    </body> 
</html>
participants.html
Use table tag and assign the heading using <th> tag. To auto increment, the table row on the new entry, use a For loop jinja template. Inside For loop add <tr> and <td> tags. 

<!DOCTYPE html> 
<html> 
    <head> 
        <title>Flask and SQLite </title> 
    </head> 
    <style> 
        table, th, td { 
          border:1px solid black; 
        } 
        </style> 
    <body> 
        <table style="width:100%"> 
            <tr> 
              <th>Name</th> 
              <th>Email</th> 
              <th>City</th> 
              <th>Country</th> 
              <th>Phone Number</th> 
            </tr> 
            {%for participant in data%} 
               <tr> 
                 <td>{{participant[0]}}</td> 
                 <td>{{participant[1]}}</td> 
                 <td>{{participant[2]}}</td> 
                 <td>{{participant[3]}}</td> 
                 <td>{{participant[4]}}</td> 
                </tr> 
            {%endfor%} 
          </table>           
    </body> 
</html> 
Step 4: Create app.py

Create a new file named app.py and build a Front End of the Web App by rendering HTML templates. From here we shall go function by function explanation as in points: 

To insert the data into the database, we first need to create a new database table. The column to be inserted in the database is Name, Email, City, Country, and Phone Number. 
The basic syntax to start with sqlite3 is to first connect to the database. sqlite3.connect(“database.db”) will create a new database. The next step is to create a new table, but it will first check if the table already exists or not. 
One button in the index.html prompts to the participant’s list, and thus using the existing database select * from the table and display it using a Python template i.e., Jinja template to run through the loop within HTML. In the following code, we have created a table tag, inside the table tag for every new insertion in the database, we add a Loop Jinja Template to auto increment the new table row. 
In the participants function, we use select all columns from the table name, we use fetchall() method you retrieve the data. 
from flask import Flask, render_template, request 
import sqlite3 
  
app = Flask(__name__) 
  
  
@app.route('/') 
@app.route('/home') 
def index(): 
    return render_template('index.html') 
  
  
connect = sqlite3.connect('database.db') 
connect.execute( 
    'CREATE TABLE IF NOT EXISTS PARTICIPANTS (name TEXT, \ 
    email TEXT, city TEXT, country TEXT, phone TEXT)') 
  
  
@app.route('/join', methods=['GET', 'POST']) 
def join(): 
    if request.method == 'POST': 
        name = request.form['name'] 
        email = request.form['email'] 
        city = request.form['city'] 
        country = request.form['country'] 
        phone = request.form['phone'] 
  
        with sqlite3.connect("database.db") as users: 
            cursor = users.cursor() 
            cursor.execute("INSERT INTO PARTICIPANTS \ 
            (name,email,city,country,phone) VALUES (?,?,?,?,?)", 
                           (name, email, city, country, phone)) 
            users.commit() 
        return render_template("index.html") 
    else: 
        return render_template('join.html') 
  
  
@app.route('/participants') 
def participants(): 
    connect = sqlite3.connect('database.db') 
    cursor = connect.cursor() 
    cursor.execute('SELECT * FROM PARTICIPANTS') 
  
    data = cursor.fetchall() 
    return render_template("participants.html", data=data) 
  
  
if __name__ == '__main__': 
    app.run(debug=False) 
Output: 

For route: http://127.0.0.1:5000/ 

How to Build a Web App using Flask and SQLite in Python
 

For route: http://127.0.0.1:5000/join

Here we are adding two new data to the database. 

How to Build a Web App using Flask and SQLite in Python
data 1

How to Build a Web App using Flask and SQLite in Python
data 2

For route: http://127.0.0.1:5000/participants


Sending Data from a Flask app to MongoDB Database
Last Updated : 10 May, 2023
This article covers how we can configure a MongoDB database with a Flask app and store some data in the database after configuring it. Before directly moving to the configuration phase here is a short overview of all tools and software we will use.

MongoDB is an open-source database that stores data in JSON-like documents. It is classified as a NoSQL database because it is based on different fundamentals as compared to a SQL relational database.

Prerequisites

A decent understanding of Python and a machine with Python installed.
Understanding of basic concepts of Flask.
MongoDB is installed on your local machine if not you can refer to this article.
Configuring MongoDB
Till this step, you have a local machine with MongoDB installed on it now run the MongoDB compass and the following screen will appear. You can edit the settings or just click connect and MongoDB will be running on your local machine.


 

Setup a Development Environment
Let’s configure the virtual environment for development, this step can be skipped but it is always recommended to use a dedicated development environment for each project to avoid dependency clash, this can be achieved using a Python virtual environment.

# Create gfg folder
$ mkdir gfg

# Move to gfg folder
$ cd gfg

 

We created a folder named `gfg` for the project, you can name it anything you want and cd (change directory) to go into your newly created directory then run the following command that will create a virtual environment for your project.

$ python -m venv venv
Now to use the virtual environment we need to first activate it, this can be done by executing the activated binary file.

$ .\venv\Scripts\activate # for Windows OS
$ source venv/bin/activate # for Linux OS

 

Installing Dependencies for the Project
We are done configuring a development environment now let us install the tools that we will be using including Flask, `pymongo` which provide the interface for Python-based apps to the MongoDB database.

$ pip install Flask pymongo

 

Next, we’ll connect a FLask app to MongoDB and send some data into it.

Creating a Flask App
We are done with the database setup and installing the required libraries now we will create a Flask app and connect it to the MongoDB we created and insert some user data into it. First, let’s create a Flask app as follows.

Create a `main.py` file in the project directory and add the following code to the file.

from flask import Flask 
  
app = Flask(__name__) 
  
  
@app.route('/') 
def hello_world(): 
    return 'Hello, World!'
  
  
if __name__ == '__main__': 
    app.run() 
Over here we have created a starter Flask App with a single route that returns a string “Hello, World!”, Now test this thing out by running the app as shown below:

Output:


 

The app is up and running now let us test the output at `http://127.0.0.1:5000`,


 

Connecting Flask App to Database
We have got a running starter Flask App with some basic code let’s connect it to the MongoDB database using the following script.

from flask import Flask, request 
from pymongo import MongoClient 
  
# Flask app object 
app = Flask(__name__) 
  
# Set up MongoDB connection 
client = MongoClient('mongodb://localhost:27017/') 
db = client['demo'] 
collection = db['data'] 
The above script will connect to the MongoDB database that we configured earlier now we need a post route to add some data in the database which can be done as follow:

@app.route('/add_data', methods=['POST']) 
def add_data(): 
    # Get data from request 
    data = request.json 
  
    # Insert data into MongoDB 
    collection.insert_one(data) 
  
    return 'Data added to MongoDB'
Here we created a route named `/add_data` which when invoked with a post request reads the JSON data from the body and inserts it into the database.

For reference here is the overall code that I used for the demo.

from flask import Flask, request 
from pymongo import MongoClient 
  
app = Flask(__name__) 
  
# root route 
@app.route('/') 
def hello_world(): 
    return 'Hello, World!'
  
# Set up MongoDB connection and collection 
client = MongoClient('mongodb://localhost:27017/') 
  
# Create database named demo if they don't exist already 
db = client['demo'] 
  
# Create collection named data if it doesn't exist already 
collection = db['data'] 
  
# Add data to MongoDB route 
@app.route('/add_data', methods=['POST']) 
def add_data(): 
    # Get data from request 
    data = request.json 
  
    # Insert data into MongoDB 
    collection.insert_one(data) 
  
    return 'Data added to MongoDB'
  
  
if __name__ == '__main__': 
    app.run() 
Sending Data from Flask to MongoDB
Now let us test the entire script and if we can insert some data into the database using it, First run the Flask App shown before then make a POST request to `/add_data` a route using a tool like Postman.


 

The response above looks fine let us check the MongoDB database if there is any data inserted or not.


 

As you can see a database named demo is created with a collection of `data` with a single document that we just inserted using Flask.



Making a Flask app using a PostgreSQL database
Last Updated : 05 Feb, 2023
The Postgres database can be accessed via one of two methods in Python. Installing PgAdmin4 is the first step because it offers a user interface for interacting with databases and another for using the psycopg2 connector. In this post, we’ll concentrate on a different approach that lets us alter the Postgres database: using the psycopg2 connector. This article presupposes that Postgres has been successfully installed on your computer or device.

Let’s get started on the project. An HTML page will be added to display the modifications, along with a few products and their prices. It will include the three tables. earliest for product details. second to update existing items, and third to add new ones.

Steps to make Flask app using a PostgreSQL Database
Step 1: Open your command line tool and connect with Postgres. After entering the username it will ask you for the password enter it appropriately.

psql -U username
Step 2: Once we successfully connected then create a new database ‘flask_db’. We will use it further to create tables in it.

Making a Flask app using a PostgreSQL database
 

Step 3: Create a folder structure like this. 


 

Step 4:  Connect with the database. you will have to use psycopg2 connect to use the commands.

conn = psycopg2.connect(database="flask_db",  
                        user="postgres", 
                        password="root",  
                        host="localhost", port="5432") 
  
cur = conn.cursor() 
  
conn.commit() 
  
cur.close() 
conn.close() 
Step 5:  app.py

This will authenticate the user and allows us to execute queries on it. It creates a cursor on the connection by using cur. execute() method executes the queries for us. Once we completed our queries we have to close the connection for security purposes.

from flask import Flask, render_template, request, redirect, url_for 
import psycopg2 
  
app = Flask(__name__) 
  
# Connect to the database 
conn = psycopg2.connect(database="flask_db", user="postgres", 
                        password="root", host="localhost", port="5432") 
  
# create a cursor 
cur = conn.cursor() 
  
# if you already have any table or not id doesnt matter this  
# will create a products table for you. 
cur.execute( 
    '''CREATE TABLE IF NOT EXISTS products (id serial \ 
    PRIMARY KEY, name varchar(100), price float);''') 
  
# Insert some data into the table 
cur.execute( 
    '''INSERT INTO products (name, price) VALUES \ 
    ('Apple', 1.99), ('Orange', 0.99), ('Banana', 0.59);''') 
  
# commit the changes 
conn.commit() 
  
# close the cursor and connection 
cur.close() 
conn.close() 
  
  
@app.route('/') 
def index(): 
    # Connect to the database 
    conn = psycopg2.connect(database="flask_db", 
                            user="postgres", 
                            password="root", 
                            host="localhost", port="5432") 
  
    # create a cursor 
    cur = conn.cursor() 
  
    # Select all products from the table 
    cur.execute('''SELECT * FROM products''') 
  
    # Fetch the data 
    data = cur.fetchall() 
  
    # close the cursor and connection 
    cur.close() 
    conn.close() 
  
    return render_template('index.html', data=data) 
  
  
@app.route('/create', methods=['POST']) 
def create(): 
    conn = psycopg2.connect(database="flask_db", 
                            user="postgres", 
                            password="root", 
                            host="localhost", port="5432") 
  
    cur = conn.cursor() 
  
    # Get the data from the form 
    name = request.form['name'] 
    price = request.form['price'] 
  
    # Insert the data into the table 
    cur.execute( 
        '''INSERT INTO products \ 
        (name, price) VALUES (%s, %s)''', 
        (name, price)) 
  
    # commit the changes 
    conn.commit() 
  
    # close the cursor and connection 
    cur.close() 
    conn.close() 
  
    return redirect(url_for('index')) 
  
  
@app.route('/update', methods=['POST']) 
def update(): 
    conn = psycopg2.connect(database="flask_db", 
                            user="postgres", 
                            password="root", 
                            host="localhost", port="5432") 
  
    cur = conn.cursor() 
  
    # Get the data from the form 
    name = request.form['name'] 
    price = request.form['price'] 
    id = request.form['id'] 
  
    # Update the data in the table 
    cur.execute( 
        '''UPDATE products SET name=%s,\ 
        price=%s WHERE id=%s''', (name, price, id)) 
  
    # commit the changes 
    conn.commit() 
    return redirect(url_for('index')) 
  
  
@app.route('/delete', methods=['POST']) 
def delete(): 
    conn = psycopg2.connect 
    (database="flask_db", user="postgres", 
     password="root", 
     host="localhost", port="5432") 
    cur = conn.cursor() 
  
    # Get the data from the form 
    id = request.form['id'] 
  
    # Delete the data from the table 
    cur.execute('''DELETE FROM products WHERE id=%s''', (id,)) 
  
    # commit the changes 
    conn.commit() 
  
    # close the cursor and connection 
    cur.close() 
    conn.close() 
  
    return redirect(url_for('index')) 
  
  
if __name__ == '__main__': 
    app.run(debug=True) 
Step 4: templates/index.html

You will need this index file to see results and perform operations. Just add these template codes to their respective path.

<html> 
  <head> 
    <title>CRUD App</title> 
  </head> 
  <body> 
    <h1>CRUD App</h1> 
    <table> 
      <thead> 
        <tr> 
          <th>ID</th> 
          <th>Name</th> 
          <th>Price</th> 
          <th>Actions</th> 
        </tr> 
      </thead> 
      <tbody> 
        {% for row in data %} 
        <tr> 
          <td>{{ row[0] }}</td> 
          <td>{{ row[1] }}</td> 
          <td>{{ row[2] }}</td> 
          <td> 
            <form action="/update" method="post"> 
              <input type="hidden" name="id" value="{{ row[0] }}"> 
              <input type="text" name="name" value="{{ row[1] }}"> 
              <input type="text" name="price" value="{{ row[2] }}"> 
              <input type="submit" value="Update"> 
            </form> 
            <form action="/delete" method="post"> 
              <input type="hidden" name="id" value="{{ row[0] }}"> 
              <input type="submit" value="Delete"> 
            </form> 
          </td> 
        </tr> 
        {% endfor %} 
      </tbody> 
    </table> 
    <h2>Create a new product</h2> 
    <form action="/create" method="post"> 
      <input type="text" name="name" placeholder="Name"> 
      <input type="text" name="price" placeholder="Price"> 
      <input type="submit" value="Create"> 
    </form> 
  </body> 
</html> 
Step 4: Run our app 

Enter the flask run command to run it in the development mode and make sure the flask debug is on.

flask run
Through this, we have successfully executed Crud operations on the database. You will have the output attached to this and a GitHub repository link where you can find all the source code.

Output:

Making a Flask app using a PostgreSQL database
 

Flask Deployment and Error Handling

Subdomain in Flask | Python
Last Updated : 17 Apr, 2019
Prerequisite: Introduction to Flask

In this article, we will learn how to setup subdomains in Flask. But first, let’s go through the basic like what is DNS and subdomains.

Domain Name System (DNS):
The Domain Name System (DNS) is a hierarchical and decentralized naming system for computers, services, or other resources connected to the Internet or a private network. Most prominently, it translates more readily memorized domain names to the numerical IP addresses needed for locating and identifying computer services and devices with the underlying network protocols.
DNS is basically using words (Domain Names) in place of numbers (IP addresses) to locate something. For example, 127.0.0.1 is used to point the local computer address, localhost.

Subdomain:
A subdomain is a domain that is part of a larger domain. Basically, it’s a sort of child domain which means it is a part of some parent domain. For example, practice.geeksforgeeks.org and write.geeksforgeeks.org are subdomains of the geeksforgeeks.org domain, which in turn is a subdomain of the org top-level domain (TLD).
These are different from the path defined after TLD as in geeksforgeeks.org/basic/.

Further, we will discuss how to set endpoints in your web application using Python’s micro-framework, Flask.

Adding alternate domain name for local IP –
Prior to the coding part, we got to setup hosts file in order to provide alternate names to local IP so that we are able to test our app locally. Edit this file with root privileges.

Linux: /etc/hosts 
Windows: C:\Windows\System32\Drivers\etc\hosts
Add these lines to set up alternate domain names.

127.0.0.1       vibhu.gfg
127.0.0.1       practice.vibhu.gfg
In this example, we’re considering vibhu.gfg as our domain name, with gfg being the TLD. practice would be a subdomain we’re targeting to set in our web app.

Setting up the Server –
In the app’s configuration SERVER_NAME is set to the domain name, along with the port number we intend to run our app on. The default port, flask uses is 5000, so we take it as it is.

from flask import Flask 
  
app = Flask(__name__) 
  
  
@app.route('/') 
def home(): 
    return "Welcome to GeeksForGeeks !"
  
  
if __name__ == "__main__": 
    website_url = 'vibhu.gfg:5000'
    app.config['SERVER_NAME'] = website_url 
    app.run() 
Output:
Run the app and notice the link on which the app is running.

Test the link on your browser.


Adding Several Endpoints –

basic: An endpoint with extension to the path on the main domain.
practice: An endpoint serving on the practice subdomain.
courses: An endpoint with extension on to the path on the practice subdomain.
Subdomains in Flask are set using the subdomain parameter in the app.route decorator.

from flask import Flask 
  
app = Flask(__name__) 
  
  
@app.route('/') 
def home(): 
    return "Welcome to GeeksForGeeks !"
  
  
@app.route('/basic/') 
def basic(): 
    return "Basic Category Articles " \ 
           "listed on this page."
  
  
@app.route('/', subdomain ='practice') 
def practice(): 
    return "Coding Practice Page"
  
  
@app.route('/courses/', subdomain ='practice') 
def courses(): 
    return "Courses listed " \ 
           "under practice subdomain."
  
  
if __name__ == "__main__": 
    website_url = 'vibhu.gfg:5000'
    app.config['SERVER_NAME'] = website_url 
    app.run() 
Output:


Handling 404 Error in Flask
Last Updated : 15 Oct, 2020
Prerequisite: Creating simple application in Flask

A 404 Error is showed whenever a page is not found. Maybe the owner changed its URL and forgot to change the link or maybe they deleted the page itself. Every site needs a Custom Error page to avoid the user to see the default Ugly Error page.

GeeksforGeeks also has a customized error page. If we type a URL like
www.geeksforgeeks.org/ajneawnewiaiowjf

Default 404 Error


GeeksForGeeks Customized Error Page


It will show an Error 404 page since this URL doesn’t exist. But an error page provides a beautiful layout, helps the user to go back, or even takes them to the homepage after a specific time interval. That is why Custom Error pages are necessary for every website.

Flask provides us with a way to handle the error and return our Custom Error page.

For this, we need to download and import flask. Download the flask through the following commands on CMD.

pip install flask
Using app.py as our Python file to manage templates, 404.html be the file we will return in the case of a 404 error and header.html be the file with header and navbar of a website.

app.py
Flask allows us to make a python file to define all routes and functions. In app.py we have defined the route to the main page (‘/’) and error handler function which is a flask function and we passed 404 error as a parameter.

from flask import Flask, render_template 
  
app = Flask(__name__) 
  
# app name 
@app.errorhandler(404) 
  
# inbuilt function which takes error as parameter 
def not_found(e): 
  
# defining function 
  return render_template("404.html") 
The above python program will return 404.html file whenever the user opens a broken link.

404.html
The following code exports header and navbar from header.html.
Both files should be stored in templates folder according to the flask.

{% extends "header.html" %} 
<!-- Exports header and navbar from header.html 
     or any file you want-->
{% block title %}Page Not Found{% endblock %} 
{% block body %} 
  
  <h1>Oops! Looks like the page doesn't exist anymore</h1> 
  <a href="{{ url_for('index') }}"><p>Click Here</a>To go to the Home Page</p> 
  
<!-- {{ url_for('index') }} is a var which returns url of index.html-->
{% endblock %} 
Automatically Redirecting to the Home page after 5 seconds
The app.py code for this example stays the same as above.
The following code Shows the Custom 404 Error page and starts a countdown of 5 seconds.
After 5 seconds are completed, it redirects the user back to the homepage.
404.html
The following code exports header and navbar from header.html.
Both files should be stored in the templates folder according to the flask.
After 5 seconds, the user will get redirected to the Home Page Automatically.

<html> 
<head> 
<title>Page Not Found</title> 
<script language="JavaScript" type="text/javascript"> 
  
var seconds =6; 
// countdown timer. took 6 because page takes approx 1 sec to load 
  
var url="{{url_for(index)}}"; 
// variable for index.html url 
  
function redirect(){ 
 if (seconds <=0){ 
  
 // redirect to new url after counter  down. 
  window.location = url; 
 } else { 
  seconds--; 
  document.getElementById("pageInfo").innerHTML="Redirecting to Home Page after " 
+seconds+" seconds." 
  setTimeout("redirect()", 1000) 
 } 
} 
</script> 
</head> 
  
{% extends "header.html" %} 
//exporting navbar and header from header.html 
{% block body %} 
   
 <body onload="redirect()"> 
<p id="pageInfo"></p> 
{% endblock %} 
  
  
</html> 
Sample header.html
This is a sample header.html which includes a navbar just like shown in the image.
It’s made up of bootstrap. You can also make one of your own.
For this one, refer the bootstrap documentation.

<!DOCTYPE html> 
<html> 
<head> 
  
<!-- LINKING ALL SCRIPTS/CSS REQUIRED FOR NAVBAR -->
  
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/ 
css/bootstrap.min.css" 
 integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E26  
3XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"> 
  
    <title>Flask</title> 
</head> 
<body> 
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity= 
"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" 
crossorigin="anonymous"></script> 
  
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd 
/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K 
/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script> 
  
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
 integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
 crossorigin="anonymous"></script> 
  
<header> 
    <!-- Starting header -->
  
    <nav class="navbar navbar-expand-lg navbar-light bg-light"> 
  <a class="navbar-brand" href="#">Navbar</a> 
  <!-- bootstrap classes for navbar -->
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target= 
"#navbarSupportedContent" aria-controls="navbarSupportedContent"
 aria-expanded="false"  aria-label="Toggle navigation"> 
    <span class="navbar-toggler-icon"></span> 
  </button> 
  
  <div class="collapse navbar-collapse" id="navbarSupportedContent"> 
    <ul class="navbar-nav mr-auto"> 
      <li class="nav-item active"> 
        <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a> 
      </li> 
      <li class="nav-item"> 
        <a class="nav-link" href="#">Link</a> 
      </li> 
      <li class="nav-item dropdown"> 
        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown"
 role="button data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> 
          Dropdown 
        </a> 
        <div class="dropdown-menu" aria-labelledby="navbarDropdown"> 
          <a class="dropdown-item" href="#">Action</a> 
          <a class="dropdown-item" href="#">Another action</a> 
          <div class="dropdown-divider"></div> 
          <a class="dropdown-item" href="#">Something else here</a> 
        </div> 
      </li> 
      <li class="nav-item"> 
        <a class="nav-link disabled" href="#">Disabled</a> 
      </li> 
    </ul> 
    <form class="form-inline my-2 my-lg-0"> 
      <input class="form-control mr-sm-2" type="search"
       placeholder="Search" aria-label="Search"> 
      <button class="btn btn-outline-success my-2 my-sm-0" 
      type="submit">Search</button> 
    </form> 
  </div> 
</nav> 
</head> 
  
 <body > 
  
  {%block body%} 
  
  {%endblock%} 
  
</body> 
</html> 
Output:
The output will be a custom error page with header.html that the user exported.
The following is an example output with my custom header, footer, and 404.html file.



Deploy Python Flask App on Heroku
Last Updated : 01 Nov, 2023
Flask is a web application framework written in Python. Flask is based on the Werkzeug WSGI toolkit and Jinja2 template engine. Both are Pocco projects. This article revolves around how to deploy a flask app on Heroku. To demonstrate this, we are first going to create a sample application for a better understanding of the process. 

Prerequisites 
Python
pip
Heroku CLI
Git
 

Deploying Flask App on Heroku
Let’s create a simple flask application first and then it can be deployed to heroku. Create a folder named “eflask” and open the command line and cd inside the “eflask” directory. Follow the following steps to create the sample application for this tutorial.
STEP 1 : Create a virtual environment with pipenv and install Flask and Gunicorn .
 

$ pipenv install flask gunicorn 
STEP 2 : Create a “Procfile” and write the following code. 
 

$ touch Procfile 
 



STEP 3 : Create “runtime.txt” and write the following code.
 

$ touch runtime.txt 
 



STEP 4 : Create a folder named “app” and enter the folder. 
 

$ mkdir app
$ cd app
  
STEP 5 : Create a python file, “main.py” and enter the sample code.
 

 touch main.py 
 


from flask import Flask
 
app = Flask(__name__)
 
@app.route("/")
def home_view():
        return "<h1>Welcome to Geeks for Geeks</h1>"
STEP 6 :Get back to the previous directory “eflask”.Create a file“wsgi.py” and insert the following code.
 

$ cd ../
$ touch wsgi.py
 


from app.main import app
 
if __name__ == "__main__":
        app.run()
STEP 7 : Run the virtual environment.
 

$ pipenv shell 
STEP 8 : Initialize an empty repo, add the files in the repo and commit all the changes.
 

$ git init 
$ git add .
$ git commit -m "Initial Commit"
STEP 9 : Login to heroku CLI using 
 

heroku login
Now, Create a unique name for your Web app.
 

$ heroku create eflask-app
 



STEP 10 : Push your code from local to the heroku remote. 
 

$ git push heroku master
 



Finally, web app will be deployed on http://eflask-app.herokuapp.com. 
 



 

Python Flask Projects with Source Code (Beginners to Advanced)
Last Updated : 04 Apr, 2024
Flask, a Python web application framework, was created by Armin Ronacher. Known for its lightweight and efficient nature, Flask is designed for quick starts and accommodates complex applications. It is based on the Werkzeug WSGI toolkit and Jinja2 template engine.

In this article, we’ve curated a list of the best Python Flask projects for all skill levels, from beginner, intermediate to advanced. So, get ready to build amazing Flask-based projects and enhance your data science and machine learning skills! Whether you’re diving into Flask software development for the first time or looking to expand your expertise, these projects offer valuable learning opportunities.

Python Projects with Source Code for Beginners
Login and Registration Project Using Flask and MySQL
Create Contact Us using WTForms in Flask
Todo list app using Flask | Python
Build a Flask application to validate CAPTCHA
How to write a simple Flask API for hello world?
Flask project – Create a Joke App with PyJokes
Create a Weather app using Flask | Pyt
Flask NEWS Application Using Newsapi
Sending Emails Using API in Flask-Mail
Python Projects with Source Code for Intermediate
Single Page Portfolio Using Flask
Create Cricket Score API using Web Scraping in Flask
Create a Bar Chart From a data frame with Plotly and Flask
Create Scatter Charts in Matplotlib using Flask
Implement ChatGPT in a Flask Application
Wikipedia search app using Flask Framework – Python
Dominos Chatbot using Python
Advanced Python Projects with Source Code
Profile Application using Python Flask and MySQL
Twitter Sentiment Analysis WebApp Using Flask
Wikipedia search app using Flask Framework – Python
Live Search Using Flask And jQuery
Autocomplete input suggestions using Python and Flask
Build a Text Translator Web App using Flask and Azure Cognitive Services
OAuth Authentication with Flask – Connect to Google, Twitter, and Facebook
Create GitHub API to fetch user profile images and the number of repositories using Python and Flask
Image Colour Palette Generator – Flask
How to Build a Simple Android App with Flask Backend?
Components of a Flask Software Project
To build a successful Flask project, it’s essential to understand its key components:

Routes: Routes define the URL patterns and the corresponding functions to handle HTTP requests.
Templates: Templates allow you to separate the presentation layer from the application logic using Jinja2 templates.
Forms: Forms enable data validation and processing, making it easier to handle user inputs.
Database: Integrate a database to store and retrieve data efficiently. Common choices include SQLite, MySQL, or PostgreSQL.
Static Files: Static files such as CSS, JavaScript, and images are essential for the front-end appearance of your application.
Deploying Flask Projects
Once you have completed your Flask project, you’ll want to deploy it for the world to see. Consider the following deployment options:

Deployment Options
Heroku: A cloud platform that simplifies the deployment process.
PythonAnywhere: A hosting service specifically designed for Python web applications.
AWS Elastic Beanstalk: A scalable hosting service from Amazon Web Services.
Advantages of Flask Projects
Flask projects offer several advantages, making them an excellent choice for building web applications:

Simplicity: Flask is a simple and intuitive API that allows developers to focus on the core logic of their applications without being loaded down by excessive boilerplate code.
Flexibility: Flask provides the freedom to choose the tools and libraries you want to work with, giving you the flexibility to create a personalized web application with Flask software.
Easy to Learn: Flask has a design to make it easy for beginners to learn the fundamentals of web development and Python using Flask software.
Community and Documentation: Flask has a large community, and its official documentation is well-maintained, making it a developer-friendly framework with Flask software.
Scalability: Flask allows starting small and scaling the application as it grows, adding features and components as needed with Flask software.
Flask Projects – FAQs
1. How does routing work in Flask?
Routing in Flask is the process of matching the URL of an incoming request to a specific function in the Flask application. we can define routes using the @app.route() decorator, followed by the URL pattern and the associated view function. Flask will call the appropriate view function when a user accesses the specified URL.

2. Can we use templates in Flask?
Yes, Flask supports the use of templates. Templates allow you to separate the presentation logic (HTML) from the application logic (Python code). Flask uses the Jinja templating engine by default. You can render templates using the render_template() function and pass variables to them for dynamic content.

3. How to serve static files like CSS and JavaScript in Flask?
Flask provides a built-in way to serve static files. You can create a directory called “static” in your project directory and place your CSS, JavaScript, and other static files inside it. Flask will automatically serve these files under the /static/ URL path. In your HTML templates, you can reference these files using the url_for('static', filename='filename.ext') function.







